<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="51801"><g><title>qos_class_main (54 samples, 0.10%)</title><rect x="0.0039%" y="677" width="0.1042%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="54"/><text x="0.2539%" y="687.50"></text></g><g><title>start_wqthread (54 samples, 0.10%)</title><rect x="0.0039%" y="661" width="0.1042%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="54"/><text x="0.2539%" y="671.50"></text></g><g><title>-[NSApplication _handleEvent:] (11 samples, 0.02%)</title><rect x="0.1197%" y="533" width="0.0212%" height="15" fill="rgb(221,193,54)" fg:x="62" fg:w="11"/><text x="0.3697%" y="543.50"></text></g><g><title>winit::platform_impl::platform::app::WinitApplication::send_event (11 samples, 0.02%)</title><rect x="0.1197%" y="517" width="0.0212%" height="15" fill="rgb(248,212,6)" fg:x="62" fg:w="11"/><text x="0.3697%" y="527.50"></text></g><g><title>-[NSApplication(NSEventRouting) sendEvent:] (11 samples, 0.02%)</title><rect x="0.1197%" y="501" width="0.0212%" height="15" fill="rgb(208,68,35)" fg:x="62" fg:w="11"/><text x="0.3697%" y="511.50"></text></g><g><title>winit::platform_impl::platform::app_state::Handler::handle_nonuser_event (7 samples, 0.01%)</title><rect x="0.1429%" y="229" width="0.0135%" height="15" fill="rgb(232,128,0)" fg:x="74" fg:w="7"/><text x="0.3929%" y="239.50"></text></g><g><title>&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_nonuser_event::_{{closure}} (7 samples, 0.01%)</title><rect x="0.1429%" y="213" width="0.0135%" height="15" fill="rgb(207,160,47)" fg:x="74" fg:w="7"/><text x="0.3929%" y="223.50"></text></g><g><title>pcls::vis::Visualization::run::_{{closure}} (6 samples, 0.01%)</title><rect x="0.1448%" y="197" width="0.0116%" height="15" fill="rgb(228,23,34)" fg:x="75" fg:w="6"/><text x="0.3948%" y="207.50"></text></g><g><title>-[NSNotificationCenter postNotificationName:object:userInfo:] (15 samples, 0.03%)</title><rect x="0.1409%" y="341" width="0.0290%" height="15" fill="rgb(218,30,26)" fg:x="73" fg:w="15"/><text x="0.3909%" y="351.50"></text></g><g><title>_CFXNotificationPost (15 samples, 0.03%)</title><rect x="0.1409%" y="325" width="0.0290%" height="15" fill="rgb(220,122,19)" fg:x="73" fg:w="15"/><text x="0.3909%" y="335.50"></text></g><g><title>_CFXRegistrationPost (15 samples, 0.03%)</title><rect x="0.1409%" y="309" width="0.0290%" height="15" fill="rgb(250,228,42)" fg:x="73" fg:w="15"/><text x="0.3909%" y="319.50"></text></g><g><title>___CFXRegistrationPost_block_invoke (15 samples, 0.03%)</title><rect x="0.1409%" y="293" width="0.0290%" height="15" fill="rgb(240,193,28)" fg:x="73" fg:w="15"/><text x="0.3909%" y="303.50"></text></g><g><title>__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ (15 samples, 0.03%)</title><rect x="0.1409%" y="277" width="0.0290%" height="15" fill="rgb(216,20,37)" fg:x="73" fg:w="15"/><text x="0.3909%" y="287.50"></text></g><g><title>winit::platform_impl::platform::app_delegate::ApplicationDelegate::did_finish_launching (15 samples, 0.03%)</title><rect x="0.1409%" y="261" width="0.0290%" height="15" fill="rgb(206,188,39)" fg:x="73" fg:w="15"/><text x="0.3909%" y="271.50"></text></g><g><title>winit::platform_impl::platform::app_state::AppState::launched (15 samples, 0.03%)</title><rect x="0.1409%" y="245" width="0.0290%" height="15" fill="rgb(217,207,13)" fg:x="73" fg:w="15"/><text x="0.3909%" y="255.50"></text></g><g><title>winit::platform_impl::platform::menu::initialize (7 samples, 0.01%)</title><rect x="0.1564%" y="229" width="0.0135%" height="15" fill="rgb(231,73,38)" fg:x="81" fg:w="7"/><text x="0.4064%" y="239.50"></text></g><g><title>AEProcessAppleEvent (16 samples, 0.03%)</title><rect x="0.1409%" y="501" width="0.0309%" height="15" fill="rgb(225,20,46)" fg:x="73" fg:w="16"/><text x="0.3909%" y="511.50"></text></g><g><title>aeProcessAppleEvent (16 samples, 0.03%)</title><rect x="0.1409%" y="485" width="0.0309%" height="15" fill="rgb(210,31,41)" fg:x="73" fg:w="16"/><text x="0.3909%" y="495.50"></text></g><g><title>0x1a4b7aa50 (16 samples, 0.03%)</title><rect x="0.1409%" y="469" width="0.0309%" height="15" fill="rgb(221,200,47)" fg:x="73" fg:w="16"/><text x="0.3909%" y="479.50"></text></g><g><title>0x1a4b7aafc (16 samples, 0.03%)</title><rect x="0.1409%" y="453" width="0.0309%" height="15" fill="rgb(226,26,5)" fg:x="73" fg:w="16"/><text x="0.3909%" y="463.50"></text></g><g><title>_NSAppleEventManagerGenericHandler (16 samples, 0.03%)</title><rect x="0.1409%" y="437" width="0.0309%" height="15" fill="rgb(249,33,26)" fg:x="73" fg:w="16"/><text x="0.3909%" y="447.50"></text></g><g><title>-[NSAppleEventManager dispatchRawAppleEvent:withRawReply:handlerRefCon:] (16 samples, 0.03%)</title><rect x="0.1409%" y="421" width="0.0309%" height="15" fill="rgb(235,183,28)" fg:x="73" fg:w="16"/><text x="0.3909%" y="431.50"></text></g><g><title>-[NSApplication(NSAppleEventHandling) _handleCoreEvent:withReplyEvent:] (16 samples, 0.03%)</title><rect x="0.1409%" y="405" width="0.0309%" height="15" fill="rgb(221,5,38)" fg:x="73" fg:w="16"/><text x="0.3909%" y="415.50"></text></g><g><title>-[NSApplication(NSAppleEventHandling) _handleAEOpenEvent:] (16 samples, 0.03%)</title><rect x="0.1409%" y="389" width="0.0309%" height="15" fill="rgb(247,18,42)" fg:x="73" fg:w="16"/><text x="0.3909%" y="399.50"></text></g><g><title>-[NSApplication _sendFinishLaunchingNotification] (16 samples, 0.03%)</title><rect x="0.1409%" y="373" width="0.0309%" height="15" fill="rgb(241,131,45)" fg:x="73" fg:w="16"/><text x="0.3909%" y="383.50"></text></g><g><title>-[NSApplication _postDidFinishNotification] (16 samples, 0.03%)</title><rect x="0.1409%" y="357" width="0.0309%" height="15" fill="rgb(249,31,29)" fg:x="73" fg:w="16"/><text x="0.3909%" y="367.50"></text></g><g><title>CA::Layer::display_if_needed(CA::Transaction*) (8 samples, 0.02%)</title><rect x="0.1892%" y="325" width="0.0154%" height="15" fill="rgb(225,111,53)" fg:x="98" fg:w="8"/><text x="0.4392%" y="335.50"></text></g><g><title>CA::Context::commit_transaction(CA::Transaction*, double, double*) (10 samples, 0.02%)</title><rect x="0.1873%" y="341" width="0.0193%" height="15" fill="rgb(238,160,17)" fg:x="97" fg:w="10"/><text x="0.4373%" y="351.50"></text></g><g><title>CA::Transaction::run_commit_handlers(CATransactionPhase) (8 samples, 0.02%)</title><rect x="0.2066%" y="341" width="0.0154%" height="15" fill="rgb(214,148,48)" fg:x="107" fg:w="8"/><text x="0.4566%" y="351.50"></text></g><g><title>NSDisplayCycleFlush (8 samples, 0.02%)</title><rect x="0.2066%" y="325" width="0.0154%" height="15" fill="rgb(232,36,49)" fg:x="107" fg:w="8"/><text x="0.4566%" y="335.50"></text></g><g><title>NSDisplayCycleObserverInvoke (8 samples, 0.02%)</title><rect x="0.2066%" y="309" width="0.0154%" height="15" fill="rgb(209,103,24)" fg:x="107" fg:w="8"/><text x="0.4566%" y="319.50"></text></g><g><title>CA::Transaction::commit() (19 samples, 0.04%)</title><rect x="0.1873%" y="357" width="0.0367%" height="15" fill="rgb(229,88,8)" fg:x="97" fg:w="19"/><text x="0.4373%" y="367.50"></text></g><g><title>___NSRunLoopObserverCreateWithHandler_block_invoke (23 samples, 0.04%)</title><rect x="0.1815%" y="389" width="0.0444%" height="15" fill="rgb(213,181,19)" fg:x="94" fg:w="23"/><text x="0.4315%" y="399.50"></text></g><g><title>__62+[CATransaction(NSCATransaction) NS_setFlushesWithDisplayLink]_block_invoke (20 samples, 0.04%)</title><rect x="0.1873%" y="373" width="0.0386%" height="15" fill="rgb(254,191,54)" fg:x="97" fg:w="20"/><text x="0.4373%" y="383.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (10 samples, 0.02%)</title><rect x="0.2259%" y="325" width="0.0193%" height="15" fill="rgb(241,83,37)" fg:x="117" fg:w="10"/><text x="0.4759%" y="335.50"></text></g><g><title>__bzero (10 samples, 0.02%)</title><rect x="0.2259%" y="309" width="0.0193%" height="15" fill="rgb(233,36,39)" fg:x="117" fg:w="10"/><text x="0.4759%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (529 samples, 1.02%)</title><rect x="0.2761%" y="293" width="1.0212%" height="15" fill="rgb(226,3,54)" fg:x="143" fg:w="529"/><text x="0.5261%" y="303.50"></text></g><g><title>&lt;pcls::array::Array3D&lt;T&gt; as core::ops::index::Index&lt;(usize,usize)&gt;&gt;::index (8 samples, 0.02%)</title><rect x="1.2973%" y="293" width="0.0154%" height="15" fill="rgb(245,192,40)" fg:x="672" fg:w="8"/><text x="1.5473%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (30 samples, 0.06%)</title><rect x="1.3127%" y="293" width="0.0579%" height="15" fill="rgb(238,167,29)" fg:x="680" fg:w="30"/><text x="1.5627%" y="303.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialOrd for usize&gt;::lt (203 samples, 0.39%)</title><rect x="1.3706%" y="293" width="0.3919%" height="15" fill="rgb(232,182,51)" fg:x="710" fg:w="203"/><text x="1.6206%" y="303.50"></text></g><g><title>core::f32::_&lt;impl f32&gt;::from_bits (59 samples, 0.11%)</title><rect x="1.7702%" y="293" width="0.1139%" height="15" fill="rgb(231,60,39)" fg:x="917" fg:w="59"/><text x="2.0202%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.05%)</title><rect x="1.8841%" y="293" width="0.0502%" height="15" fill="rgb(208,69,12)" fg:x="976" fg:w="26"/><text x="2.1341%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_store (119 samples, 0.23%)</title><rect x="1.9343%" y="293" width="0.2297%" height="15" fill="rgb(235,93,37)" fg:x="1002" fg:w="119"/><text x="2.1843%" y="303.50"></text></g><g><title>pcls::grid::Grid::index (31 samples, 0.06%)</title><rect x="2.1641%" y="293" width="0.0598%" height="15" fill="rgb(213,116,39)" fg:x="1121" fg:w="31"/><text x="2.4141%" y="303.50"></text></g><g><title>pcls::grid::Grid::update (15 samples, 0.03%)</title><rect x="2.2239%" y="293" width="0.0290%" height="15" fill="rgb(222,207,29)" fg:x="1152" fg:w="15"/><text x="2.4739%" y="303.50"></text></g><g><title>pcls::sim::Simulation::apply_gravity (6 samples, 0.01%)</title><rect x="2.2529%" y="293" width="0.0116%" height="15" fill="rgb(206,96,30)" fg:x="1167" fg:w="6"/><text x="2.5029%" y="303.50"></text></g><g><title>pcls::sim::Simulation::constrain (54 samples, 0.10%)</title><rect x="2.2644%" y="293" width="0.1042%" height="15" fill="rgb(218,138,4)" fg:x="1173" fg:w="54"/><text x="2.5144%" y="303.50"></text></g><g><title>__bsdthread_create (20 samples, 0.04%)</title><rect x="2.3841%" y="229" width="0.0386%" height="15" fill="rgb(250,191,14)" fg:x="1235" fg:w="20"/><text x="2.6341%" y="239.50"></text></g><g><title>__bsdthread_create (75 samples, 0.14%)</title><rect x="2.4864%" y="213" width="0.1448%" height="15" fill="rgb(239,60,40)" fg:x="1288" fg:w="75"/><text x="2.7364%" y="223.50"></text></g><g><title>_kernelrpc_mach_vm_map_trap (6 samples, 0.01%)</title><rect x="2.6312%" y="213" width="0.0116%" height="15" fill="rgb(206,27,48)" fg:x="1363" fg:w="6"/><text x="2.8812%" y="223.50"></text></g><g><title>_kernelrpc_mach_vm_protect_trap (6 samples, 0.01%)</title><rect x="2.6428%" y="213" width="0.0116%" height="15" fill="rgb(225,35,8)" fg:x="1369" fg:w="6"/><text x="2.8928%" y="223.50"></text></g><g><title>mach_vm_map (12 samples, 0.02%)</title><rect x="2.6544%" y="213" width="0.0232%" height="15" fill="rgb(250,213,24)" fg:x="1375" fg:w="12"/><text x="2.9044%" y="223.50"></text></g><g><title>_kernelrpc_mach_vm_map_trap (12 samples, 0.02%)</title><rect x="2.6544%" y="197" width="0.0232%" height="15" fill="rgb(247,123,22)" fg:x="1375" fg:w="12"/><text x="2.9044%" y="207.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (177 samples, 0.34%)</title><rect x="2.3841%" y="245" width="0.3417%" height="15" fill="rgb(231,138,38)" fg:x="1235" fg:w="177"/><text x="2.6341%" y="255.50"></text></g><g><title>_pthread_create (156 samples, 0.30%)</title><rect x="2.4247%" y="229" width="0.3012%" height="15" fill="rgb(231,145,46)" fg:x="1256" fg:w="156"/><text x="2.6747%" y="239.50"></text></g><g><title>mach_vm_protect (25 samples, 0.05%)</title><rect x="2.6776%" y="213" width="0.0483%" height="15" fill="rgb(251,118,11)" fg:x="1387" fg:w="25"/><text x="2.9276%" y="223.50"></text></g><g><title>_kernelrpc_mach_vm_protect_trap (25 samples, 0.05%)</title><rect x="2.6776%" y="197" width="0.0483%" height="15" fill="rgb(217,147,25)" fg:x="1387" fg:w="25"/><text x="2.9276%" y="207.50"></text></g><g><title>std::thread::scoped::Scope::spawn (183 samples, 0.35%)</title><rect x="2.3783%" y="277" width="0.3533%" height="15" fill="rgb(247,81,37)" fg:x="1232" fg:w="183"/><text x="2.6283%" y="287.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (182 samples, 0.35%)</title><rect x="2.3803%" y="261" width="0.3513%" height="15" fill="rgb(209,12,38)" fg:x="1233" fg:w="182"/><text x="2.6303%" y="271.50"></text></g><g><title>pcls::sim::Simulation::resolve_overlaps (190 samples, 0.37%)</title><rect x="2.3687%" y="293" width="0.3668%" height="15" fill="rgb(227,1,9)" fg:x="1227" fg:w="190"/><text x="2.6187%" y="303.50"></text></g><g><title>pcls::sim::Simulation::step (1,281 samples, 2.47%)</title><rect x="0.2761%" y="309" width="2.4729%" height="15" fill="rgb(248,47,43)" fg:x="143" fg:w="1281"/><text x="0.5261%" y="319.50">pc..</text></g><g><title>pcls::sim::Simulation::verlet (7 samples, 0.01%)</title><rect x="2.7355%" y="293" width="0.0135%" height="15" fill="rgb(221,10,30)" fg:x="1417" fg:w="7"/><text x="2.9855%" y="303.50"></text></g><g><title>_platform_memmove (31 samples, 0.06%)</title><rect x="2.7683%" y="245" width="0.0598%" height="15" fill="rgb(210,229,1)" fg:x="1434" fg:w="31"/><text x="3.0183%" y="255.50"></text></g><g><title>_platform_memmove (89 samples, 0.17%)</title><rect x="2.8281%" y="229" width="0.1718%" height="15" fill="rgb(222,148,37)" fg:x="1465" fg:w="89"/><text x="3.0781%" y="239.50"></text></g><g><title>wgpu::Queue::write_texture (125 samples, 0.24%)</title><rect x="2.7683%" y="293" width="0.2413%" height="15" fill="rgb(234,67,33)" fg:x="1434" fg:w="125"/><text x="3.0183%" y="303.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::queue_write_texture (125 samples, 0.24%)</title><rect x="2.7683%" y="277" width="0.2413%" height="15" fill="rgb(247,98,35)" fg:x="1434" fg:w="125"/><text x="3.0183%" y="287.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::queue_write_texture (125 samples, 0.24%)</title><rect x="2.7683%" y="261" width="0.2413%" height="15" fill="rgb(247,138,52)" fg:x="1434" fg:w="125"/><text x="3.0183%" y="271.50"></text></g><g><title>wgpu_core::device::queue::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_write_texture (94 samples, 0.18%)</title><rect x="2.8281%" y="245" width="0.1815%" height="15" fill="rgb(213,79,30)" fg:x="1465" fg:w="94"/><text x="3.0781%" y="255.50"></text></g><g><title>pcls::vis::Visualization::run::_{{closure}} (1,432 samples, 2.76%)</title><rect x="0.2510%" y="325" width="2.7644%" height="15" fill="rgb(246,177,23)" fg:x="130" fg:w="1432"/><text x="0.5010%" y="335.50">pc..</text></g><g><title>pixels::Pixels::render (136 samples, 0.26%)</title><rect x="2.7528%" y="309" width="0.2625%" height="15" fill="rgb(230,62,27)" fg:x="1426" fg:w="136"/><text x="3.0028%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (59 samples, 0.11%)</title><rect x="3.0154%" y="309" width="0.1139%" height="15" fill="rgb(216,154,8)" fg:x="1562" fg:w="59"/><text x="3.2654%" y="319.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::checked_sub (6 samples, 0.01%)</title><rect x="3.1293%" y="309" width="0.0116%" height="15" fill="rgb(244,35,45)" fg:x="1621" fg:w="6"/><text x="3.3793%" y="319.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::saturating_add (6 samples, 0.01%)</title><rect x="3.1409%" y="309" width="0.0116%" height="15" fill="rgb(251,115,12)" fg:x="1627" fg:w="6"/><text x="3.3909%" y="319.50"></text></g><g><title>pcls::gfx::_cpix (73 samples, 0.14%)</title><rect x="3.1524%" y="309" width="0.1409%" height="15" fill="rgb(240,54,50)" fg:x="1633" fg:w="73"/><text x="3.4024%" y="319.50"></text></g><g><title>pcls::gfx::_draw_circle (10 samples, 0.02%)</title><rect x="3.2934%" y="309" width="0.0193%" height="15" fill="rgb(233,84,52)" fg:x="1706" fg:w="10"/><text x="3.5434%" y="319.50"></text></g><g><title>pcls::vis::display::_{{closure}} (155 samples, 0.30%)</title><rect x="3.0154%" y="325" width="0.2992%" height="15" fill="rgb(207,117,47)" fg:x="1562" fg:w="155"/><text x="3.2654%" y="335.50"></text></g><g><title>winit::platform_impl::platform::observer::control_flow_begin_handler (1,601 samples, 3.09%)</title><rect x="0.2259%" y="389" width="3.0907%" height="15" fill="rgb(249,43,39)" fg:x="117" fg:w="1601"/><text x="0.4759%" y="399.50">win..</text></g><g><title>winit::platform_impl::platform::app_state::AppState::wakeup (1,601 samples, 3.09%)</title><rect x="0.2259%" y="373" width="3.0907%" height="15" fill="rgb(209,38,44)" fg:x="117" fg:w="1601"/><text x="0.4759%" y="383.50">win..</text></g><g><title>winit::platform_impl::platform::app_state::Handler::handle_nonuser_event (1,601 samples, 3.09%)</title><rect x="0.2259%" y="357" width="3.0907%" height="15" fill="rgb(236,212,23)" fg:x="117" fg:w="1601"/><text x="0.4759%" y="367.50">win..</text></g><g><title>&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_nonuser_event::_{{closure}} (1,601 samples, 3.09%)</title><rect x="0.2259%" y="341" width="3.0907%" height="15" fill="rgb(242,79,21)" fg:x="117" fg:w="1601"/><text x="0.4759%" y="351.50">&lt;wi..</text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (28 samples, 0.05%)</title><rect x="3.3165%" y="325" width="0.0541%" height="15" fill="rgb(211,96,35)" fg:x="1718" fg:w="28"/><text x="3.5665%" y="335.50"></text></g><g><title>__bzero (28 samples, 0.05%)</title><rect x="3.3165%" y="309" width="0.0541%" height="15" fill="rgb(253,215,40)" fg:x="1718" fg:w="28"/><text x="3.5665%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.01%)</title><rect x="3.3706%" y="325" width="0.0135%" height="15" fill="rgb(211,81,21)" fg:x="1746" fg:w="7"/><text x="3.6206%" y="335.50"></text></g><g><title>__bzero (14 samples, 0.03%)</title><rect x="3.3841%" y="325" width="0.0270%" height="15" fill="rgb(208,190,38)" fg:x="1753" fg:w="14"/><text x="3.6341%" y="335.50"></text></g><g><title>core::f32::_&lt;impl f32&gt;::from_bits (15 samples, 0.03%)</title><rect x="3.4304%" y="309" width="0.0290%" height="15" fill="rgb(235,213,38)" fg:x="1777" fg:w="15"/><text x="3.6804%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_store (31 samples, 0.06%)</title><rect x="3.4594%" y="309" width="0.0598%" height="15" fill="rgb(237,122,38)" fg:x="1792" fg:w="31"/><text x="3.7094%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,179 samples, 4.21%)</title><rect x="3.5192%" y="293" width="4.2065%" height="15" fill="rgb(244,218,35)" fg:x="1823" fg:w="2179"/><text x="3.7692%" y="303.50">&lt;core..</text></g><g><title>&lt;pcls::array::Array3D&lt;T&gt; as core::ops::index::Index&lt;(usize,usize)&gt;&gt;::index (38 samples, 0.07%)</title><rect x="7.7257%" y="293" width="0.0734%" height="15" fill="rgb(240,68,47)" fg:x="4002" fg:w="38"/><text x="7.9757%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (169 samples, 0.33%)</title><rect x="7.7991%" y="293" width="0.3262%" height="15" fill="rgb(210,16,53)" fg:x="4040" fg:w="169"/><text x="8.0491%" y="303.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialOrd for usize&gt;::lt (933 samples, 1.80%)</title><rect x="8.1253%" y="293" width="1.8011%" height="15" fill="rgb(235,124,12)" fg:x="4209" fg:w="933"/><text x="8.3753%" y="303.50">c..</text></g><g><title>core::f32::_&lt;impl f32&gt;::clamp (23 samples, 0.04%)</title><rect x="9.9264%" y="293" width="0.0444%" height="15" fill="rgb(224,169,11)" fg:x="5142" fg:w="23"/><text x="10.1764%" y="303.50"></text></g><g><title>core::f32::_&lt;impl f32&gt;::from_bits (289 samples, 0.56%)</title><rect x="9.9708%" y="293" width="0.5579%" height="15" fill="rgb(250,166,2)" fg:x="5165" fg:w="289"/><text x="10.2208%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (88 samples, 0.17%)</title><rect x="10.5288%" y="293" width="0.1699%" height="15" fill="rgb(242,216,29)" fg:x="5454" fg:w="88"/><text x="10.7788%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_store (460 samples, 0.89%)</title><rect x="10.6986%" y="293" width="0.8880%" height="15" fill="rgb(230,116,27)" fg:x="5542" fg:w="460"/><text x="10.9486%" y="303.50"></text></g><g><title>pcls::grid::Grid::index (138 samples, 0.27%)</title><rect x="11.5866%" y="293" width="0.2664%" height="15" fill="rgb(228,99,48)" fg:x="6002" fg:w="138"/><text x="11.8366%" y="303.50"></text></g><g><title>pcls::grid::Grid::update (70 samples, 0.14%)</title><rect x="11.8531%" y="293" width="0.1351%" height="15" fill="rgb(253,11,6)" fg:x="6140" fg:w="70"/><text x="12.1031%" y="303.50"></text></g><g><title>pcls::sim::Simulation::constrain (210 samples, 0.41%)</title><rect x="11.9978%" y="293" width="0.4054%" height="15" fill="rgb(247,143,39)" fg:x="6215" fg:w="210"/><text x="12.2478%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.02%)</title><rect x="12.4052%" y="277" width="0.0174%" height="15" fill="rgb(236,97,10)" fg:x="6426" fg:w="9"/><text x="12.6552%" y="287.50"></text></g><g><title>pcls::sim::Simulation::resolve_overlaps::_{{closure}} (15 samples, 0.03%)</title><rect x="12.4283%" y="277" width="0.0290%" height="15" fill="rgb(233,208,19)" fg:x="6438" fg:w="15"/><text x="12.6783%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::thread::Thread&gt; (15 samples, 0.03%)</title><rect x="12.4283%" y="261" width="0.0290%" height="15" fill="rgb(216,164,2)" fg:x="6438" fg:w="15"/><text x="12.6783%" y="271.50"></text></g><g><title>pthread_detach (14 samples, 0.03%)</title><rect x="12.4303%" y="245" width="0.0270%" height="15" fill="rgb(220,129,5)" fg:x="6439" fg:w="14"/><text x="12.6803%" y="255.50"></text></g><g><title>__bsdthread_create (92 samples, 0.18%)</title><rect x="12.4978%" y="229" width="0.1776%" height="15" fill="rgb(242,17,10)" fg:x="6474" fg:w="92"/><text x="12.7478%" y="239.50"></text></g><g><title>__rustc::__rust_no_alloc_shim_is_unstable_v2 (9 samples, 0.02%)</title><rect x="12.6754%" y="229" width="0.0174%" height="15" fill="rgb(242,107,0)" fg:x="6566" fg:w="9"/><text x="12.9254%" y="239.50"></text></g><g><title>__bsdthread_create (299 samples, 0.58%)</title><rect x="12.9804%" y="213" width="0.5772%" height="15" fill="rgb(251,28,31)" fg:x="6724" fg:w="299"/><text x="13.2304%" y="223.50"></text></g><g><title>_kernelrpc_mach_vm_map_trap (32 samples, 0.06%)</title><rect x="13.5577%" y="213" width="0.0618%" height="15" fill="rgb(233,223,10)" fg:x="7023" fg:w="32"/><text x="13.8077%" y="223.50"></text></g><g><title>_kernelrpc_mach_vm_protect_trap (19 samples, 0.04%)</title><rect x="13.6194%" y="213" width="0.0367%" height="15" fill="rgb(215,21,27)" fg:x="7055" fg:w="19"/><text x="13.8694%" y="223.50"></text></g><g><title>mach_vm_map (71 samples, 0.14%)</title><rect x="13.6561%" y="213" width="0.1371%" height="15" fill="rgb(232,23,21)" fg:x="7074" fg:w="71"/><text x="13.9061%" y="223.50"></text></g><g><title>_kernelrpc_mach_vm_map_trap (69 samples, 0.13%)</title><rect x="13.6600%" y="197" width="0.1332%" height="15" fill="rgb(244,5,23)" fg:x="7076" fg:w="69"/><text x="13.9100%" y="207.50"></text></g><g><title>_pthread_create (633 samples, 1.22%)</title><rect x="12.6928%" y="229" width="1.2220%" height="15" fill="rgb(226,81,46)" fg:x="6575" fg:w="633"/><text x="12.9428%" y="239.50"></text></g><g><title>mach_vm_protect (63 samples, 0.12%)</title><rect x="13.7932%" y="213" width="0.1216%" height="15" fill="rgb(247,70,30)" fg:x="7145" fg:w="63"/><text x="14.0432%" y="223.50"></text></g><g><title>_kernelrpc_mach_vm_protect_trap (62 samples, 0.12%)</title><rect x="13.7951%" y="197" width="0.1197%" height="15" fill="rgb(212,68,19)" fg:x="7146" fg:w="62"/><text x="14.0451%" y="207.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (747 samples, 1.44%)</title><rect x="12.4843%" y="245" width="1.4421%" height="15" fill="rgb(240,187,13)" fg:x="6467" fg:w="747"/><text x="12.7343%" y="255.50"></text></g><g><title>std::thread::scoped::Scope::spawn (767 samples, 1.48%)</title><rect x="12.4573%" y="277" width="1.4807%" height="15" fill="rgb(223,113,26)" fg:x="6453" fg:w="767"/><text x="12.7073%" y="287.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (757 samples, 1.46%)</title><rect x="12.4766%" y="261" width="1.4614%" height="15" fill="rgb(206,192,2)" fg:x="6463" fg:w="757"/><text x="12.7266%" y="271.50"></text></g><g><title>pcls::sim::Simulation::resolve_overlaps (806 samples, 1.56%)</title><rect x="12.4032%" y="293" width="1.5560%" height="15" fill="rgb(241,108,4)" fg:x="6425" fg:w="806"/><text x="12.6532%" y="303.50"></text></g><g><title>std::thread::scoped::scope (11 samples, 0.02%)</title><rect x="13.9380%" y="277" width="0.0212%" height="15" fill="rgb(247,173,49)" fg:x="7220" fg:w="11"/><text x="14.1880%" y="287.50"></text></g><g><title>std::thread::Thread::park (10 samples, 0.02%)</title><rect x="13.9399%" y="261" width="0.0193%" height="15" fill="rgb(224,114,35)" fg:x="7221" fg:w="10"/><text x="14.1899%" y="271.50"></text></g><g><title>_dispatch_semaphore_wait_slow (10 samples, 0.02%)</title><rect x="13.9399%" y="245" width="0.0193%" height="15" fill="rgb(245,159,27)" fg:x="7221" fg:w="10"/><text x="14.1899%" y="255.50"></text></g><g><title>pcls::sim::Simulation::step (5,456 samples, 10.53%)</title><rect x="3.5192%" y="309" width="10.5326%" height="15" fill="rgb(245,172,44)" fg:x="1823" fg:w="5456"/><text x="3.7692%" y="319.50">pcls::sim::Simu..</text></g><g><title>pcls::sim::Simulation::verlet (48 samples, 0.09%)</title><rect x="13.9592%" y="293" width="0.0927%" height="15" fill="rgb(236,23,11)" fg:x="7231" fg:w="48"/><text x="14.2092%" y="303.50"></text></g><g><title>wgpu_core::command::render::RenderPassInfo&lt;A&gt;::start (7 samples, 0.01%)</title><rect x="14.0615%" y="213" width="0.0135%" height="15" fill="rgb(205,117,38)" fg:x="7284" fg:w="7"/><text x="14.3115%" y="223.50"></text></g><g><title>wgpu_hal::metal::command::_&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::CommandEncoder&gt;::begin_render_pass (7 samples, 0.01%)</title><rect x="14.0615%" y="197" width="0.0135%" height="15" fill="rgb(237,72,25)" fg:x="7284" fg:w="7"/><text x="14.3115%" y="207.50"></text></g><g><title>objc::rc::autorelease::autoreleasepool (7 samples, 0.01%)</title><rect x="14.0615%" y="181" width="0.0135%" height="15" fill="rgb(244,70,9)" fg:x="7284" fg:w="7"/><text x="14.3115%" y="191.50"></text></g><g><title>-[AGXG16GFamilyCommandBuffer renderCommandEncoderWithDescriptor:] (6 samples, 0.01%)</title><rect x="14.0634%" y="165" width="0.0116%" height="15" fill="rgb(217,125,39)" fg:x="7285" fg:w="6"/><text x="14.3134%" y="175.50"></text></g><g><title>-[AGXG16GFamilyRenderContext initWithCommandBuffer:descriptor:subEncoderIndex:framebuffer:] (6 samples, 0.01%)</title><rect x="14.0634%" y="149" width="0.0116%" height="15" fill="rgb(235,36,10)" fg:x="7285" fg:w="6"/><text x="14.3134%" y="159.50"></text></g><g><title>pixels::renderers::ScalingRenderer::render (12 samples, 0.02%)</title><rect x="14.0596%" y="293" width="0.0232%" height="15" fill="rgb(251,123,47)" fg:x="7283" fg:w="12"/><text x="14.3096%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;wgpu::RenderPass&gt; (12 samples, 0.02%)</title><rect x="14.0596%" y="277" width="0.0232%" height="15" fill="rgb(221,13,13)" fg:x="7283" fg:w="12"/><text x="14.3096%" y="287.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::command_encoder_end_render_pass (12 samples, 0.02%)</title><rect x="14.0596%" y="261" width="0.0232%" height="15" fill="rgb(238,131,9)" fg:x="7283" fg:w="12"/><text x="14.3096%" y="271.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::command_encoder_end_render_pass (12 samples, 0.02%)</title><rect x="14.0596%" y="245" width="0.0232%" height="15" fill="rgb(211,50,8)" fg:x="7283" fg:w="12"/><text x="14.3096%" y="255.50"></text></g><g><title>wgpu_core::command::render::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (12 samples, 0.02%)</title><rect x="14.0596%" y="229" width="0.0232%" height="15" fill="rgb(245,182,24)" fg:x="7283" fg:w="12"/><text x="14.3096%" y="239.50"></text></g><g><title>-[AGXG16GFamilyCommandBuffer commit] (7 samples, 0.01%)</title><rect x="14.0866%" y="213" width="0.0135%" height="15" fill="rgb(242,14,37)" fg:x="7297" fg:w="7"/><text x="14.3366%" y="223.50"></text></g><g><title>&lt;wgpu_hal::metal::Queue as wgpu_hal::Queue&lt;wgpu_hal::metal::Api&gt;&gt;::submit (8 samples, 0.02%)</title><rect x="14.0866%" y="245" width="0.0154%" height="15" fill="rgb(246,228,12)" fg:x="7297" fg:w="8"/><text x="14.3366%" y="255.50"></text></g><g><title>objc::rc::autorelease::autoreleasepool (8 samples, 0.02%)</title><rect x="14.0866%" y="229" width="0.0154%" height="15" fill="rgb(213,55,15)" fg:x="7297" fg:w="8"/><text x="14.3366%" y="239.50"></text></g><g><title>wgpu::Queue::submit (19 samples, 0.04%)</title><rect x="14.0866%" y="293" width="0.0367%" height="15" fill="rgb(209,9,3)" fg:x="7297" fg:w="19"/><text x="14.3366%" y="303.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::queue_submit (19 samples, 0.04%)</title><rect x="14.0866%" y="277" width="0.0367%" height="15" fill="rgb(230,59,30)" fg:x="7297" fg:w="19"/><text x="14.3366%" y="287.50"></text></g><g><title>wgpu_core::device::queue::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_submit (19 samples, 0.04%)</title><rect x="14.0866%" y="261" width="0.0367%" height="15" fill="rgb(209,121,21)" fg:x="7297" fg:w="19"/><text x="14.3366%" y="271.50"></text></g><g><title>_platform_memmove (169 samples, 0.33%)</title><rect x="14.1233%" y="245" width="0.3262%" height="15" fill="rgb(220,109,13)" fg:x="7316" fg:w="169"/><text x="14.3733%" y="255.50"></text></g><g><title>_platform_memmove (404 samples, 0.78%)</title><rect x="14.4495%" y="229" width="0.7799%" height="15" fill="rgb(232,18,1)" fg:x="7485" fg:w="404"/><text x="14.6995%" y="239.50"></text></g><g><title>mach_msg2_internal (6 samples, 0.01%)</title><rect x="15.2429%" y="53" width="0.0116%" height="15" fill="rgb(215,41,42)" fg:x="7896" fg:w="6"/><text x="15.4929%" y="63.50"></text></g><g><title>mach_msg2_trap (6 samples, 0.01%)</title><rect x="15.2429%" y="37" width="0.0116%" height="15" fill="rgb(224,123,36)" fg:x="7896" fg:w="6"/><text x="15.4929%" y="47.50"></text></g><g><title>-[AGXBuffer initWithDevice:length:alignment:options:isSuballocDisabled:pinnedGPULocation:] (10 samples, 0.02%)</title><rect x="15.2391%" y="181" width="0.0193%" height="15" fill="rgb(240,125,3)" fg:x="7894" fg:w="10"/><text x="15.4891%" y="191.50"></text></g><g><title>-[AGXBuffer(Internal) initWithDevice:length:alignment:options:isSuballocDisabled:resourceInArgs:pinnedGPULocation:] (10 samples, 0.02%)</title><rect x="15.2391%" y="165" width="0.0193%" height="15" fill="rgb(205,98,50)" fg:x="7894" fg:w="10"/><text x="15.4891%" y="175.50"></text></g><g><title>-[AGXBuffer(Internal) initWithDevice:length:alignment:pointerTag:options:isSuballocDisabled:resourceInArgs:pinnedGPULocation:] (10 samples, 0.02%)</title><rect x="15.2391%" y="149" width="0.0193%" height="15" fill="rgb(205,185,37)" fg:x="7894" fg:w="10"/><text x="15.4891%" y="159.50"></text></g><g><title>-[IOGPUMetalBuffer initWithDevice:pointer:length:alignment:options:sysMemSize:gpuAddress:gpuTag:args:argsSize:deallocator:] (10 samples, 0.02%)</title><rect x="15.2391%" y="133" width="0.0193%" height="15" fill="rgb(238,207,15)" fg:x="7894" fg:w="10"/><text x="15.4891%" y="143.50"></text></g><g><title>-[IOGPUMetalResource initWithDevice:remoteStorageResource:options:args:argsSize:] (8 samples, 0.02%)</title><rect x="15.2429%" y="117" width="0.0154%" height="15" fill="rgb(213,199,42)" fg:x="7896" fg:w="8"/><text x="15.4929%" y="127.50"></text></g><g><title>IOGPUResourceCreate (8 samples, 0.02%)</title><rect x="15.2429%" y="101" width="0.0154%" height="15" fill="rgb(235,201,11)" fg:x="7896" fg:w="8"/><text x="15.4929%" y="111.50"></text></g><g><title>IOConnectCallMethod (8 samples, 0.02%)</title><rect x="15.2429%" y="85" width="0.0154%" height="15" fill="rgb(207,46,11)" fg:x="7896" fg:w="8"/><text x="15.4929%" y="95.50"></text></g><g><title>io_connect_method (8 samples, 0.02%)</title><rect x="15.2429%" y="69" width="0.0154%" height="15" fill="rgb(241,35,35)" fg:x="7896" fg:w="8"/><text x="15.4929%" y="79.50"></text></g><g><title>wgpu_core::device::queue::prepare_staging_buffer (12 samples, 0.02%)</title><rect x="15.2391%" y="229" width="0.0232%" height="15" fill="rgb(243,32,47)" fg:x="7894" fg:w="12"/><text x="15.4891%" y="239.50"></text></g><g><title>wgpu_hal::metal::device::_&lt;impl wgpu_hal::Device&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Device&gt;::create_buffer (12 samples, 0.02%)</title><rect x="15.2391%" y="213" width="0.0232%" height="15" fill="rgb(247,202,23)" fg:x="7894" fg:w="12"/><text x="15.4891%" y="223.50"></text></g><g><title>objc::rc::autorelease::autoreleasepool (12 samples, 0.02%)</title><rect x="15.2391%" y="197" width="0.0232%" height="15" fill="rgb(219,102,11)" fg:x="7894" fg:w="12"/><text x="15.4891%" y="207.50"></text></g><g><title>wgpu::Queue::write_texture (597 samples, 1.15%)</title><rect x="14.1233%" y="293" width="1.1525%" height="15" fill="rgb(243,110,44)" fg:x="7316" fg:w="597"/><text x="14.3733%" y="303.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::queue_write_texture (597 samples, 1.15%)</title><rect x="14.1233%" y="277" width="1.1525%" height="15" fill="rgb(222,74,54)" fg:x="7316" fg:w="597"/><text x="14.3733%" y="287.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::queue_write_texture (597 samples, 1.15%)</title><rect x="14.1233%" y="261" width="1.1525%" height="15" fill="rgb(216,99,12)" fg:x="7316" fg:w="597"/><text x="14.3733%" y="271.50"></text></g><g><title>wgpu_core::device::queue::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_write_texture (428 samples, 0.83%)</title><rect x="14.4495%" y="245" width="0.8262%" height="15" fill="rgb(226,22,26)" fg:x="7485" fg:w="428"/><text x="14.6995%" y="255.50"></text></g><g><title>wgpu_hal::metal::command::_&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::CommandEncoder&gt;::copy_buffer_to_texture (7 samples, 0.01%)</title><rect x="15.2623%" y="229" width="0.0135%" height="15" fill="rgb(217,163,10)" fg:x="7906" fg:w="7"/><text x="15.5123%" y="239.50"></text></g><g><title>CAMetalLayerPrivateNextDrawableLocked(CAMetalLayer*, CAMetalDrawable**, unsigned long*) (7 samples, 0.01%)</title><rect x="15.2758%" y="181" width="0.0135%" height="15" fill="rgb(213,25,53)" fg:x="7913" fg:w="7"/><text x="15.5258%" y="191.50"></text></g><g><title>wgpu::Surface::get_current_texture (8 samples, 0.02%)</title><rect x="15.2758%" y="293" width="0.0154%" height="15" fill="rgb(252,105,26)" fg:x="7913" fg:w="8"/><text x="15.5258%" y="303.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::surface_get_current_texture (8 samples, 0.02%)</title><rect x="15.2758%" y="277" width="0.0154%" height="15" fill="rgb(220,39,43)" fg:x="7913" fg:w="8"/><text x="15.5258%" y="287.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::surface_get_current_texture (8 samples, 0.02%)</title><rect x="15.2758%" y="261" width="0.0154%" height="15" fill="rgb(229,68,48)" fg:x="7913" fg:w="8"/><text x="15.5258%" y="271.50"></text></g><g><title>wgpu_core::present::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::surface_get_current_texture (8 samples, 0.02%)</title><rect x="15.2758%" y="245" width="0.0154%" height="15" fill="rgb(252,8,32)" fg:x="7913" fg:w="8"/><text x="15.5258%" y="255.50"></text></g><g><title>wgpu_hal::metal::surface::_&lt;impl wgpu_hal::Surface&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Surface&gt;::acquire_texture (8 samples, 0.02%)</title><rect x="15.2758%" y="229" width="0.0154%" height="15" fill="rgb(223,20,43)" fg:x="7913" fg:w="8"/><text x="15.5258%" y="239.50"></text></g><g><title>objc::rc::autorelease::autoreleasepool (8 samples, 0.02%)</title><rect x="15.2758%" y="213" width="0.0154%" height="15" fill="rgb(229,81,49)" fg:x="7913" fg:w="8"/><text x="15.5258%" y="223.50"></text></g><g><title>-[CAMetalLayer nextDrawable] (8 samples, 0.02%)</title><rect x="15.2758%" y="197" width="0.0154%" height="15" fill="rgb(236,28,36)" fg:x="7913" fg:w="8"/><text x="15.5258%" y="207.50"></text></g><g><title>pcls::vis::Visualization::run::_{{closure}} (6,157 samples, 11.89%)</title><rect x="3.4111%" y="325" width="11.8859%" height="15" fill="rgb(249,185,26)" fg:x="1767" fg:w="6157"/><text x="3.6611%" y="335.50">pcls::vis::Visuali..</text></g><g><title>pixels::Pixels::render (641 samples, 1.24%)</title><rect x="14.0596%" y="309" width="1.2374%" height="15" fill="rgb(249,174,33)" fg:x="7283" fg:w="641"/><text x="14.3096%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (242 samples, 0.47%)</title><rect x="15.2970%" y="309" width="0.4672%" height="15" fill="rgb(233,201,37)" fg:x="7924" fg:w="242"/><text x="15.5470%" y="319.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::checked_sub (13 samples, 0.03%)</title><rect x="15.7642%" y="309" width="0.0251%" height="15" fill="rgb(221,78,26)" fg:x="8166" fg:w="13"/><text x="16.0142%" y="319.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::saturating_add (31 samples, 0.06%)</title><rect x="15.7893%" y="309" width="0.0598%" height="15" fill="rgb(250,127,30)" fg:x="8179" fg:w="31"/><text x="16.0393%" y="319.50"></text></g><g><title>pcls::gfx::_cpix (295 samples, 0.57%)</title><rect x="15.8549%" y="309" width="0.5695%" height="15" fill="rgb(230,49,44)" fg:x="8213" fg:w="295"/><text x="16.1049%" y="319.50"></text></g><g><title>pcls::gfx::_draw_circle (59 samples, 0.11%)</title><rect x="16.4244%" y="309" width="0.1139%" height="15" fill="rgb(229,67,23)" fg:x="8508" fg:w="59"/><text x="16.6744%" y="319.50"></text></g><g><title>pcls::vis::display::_{{closure}} (653 samples, 1.26%)</title><rect x="15.2970%" y="325" width="1.2606%" height="15" fill="rgb(249,83,47)" fg:x="7924" fg:w="653"/><text x="15.5470%" y="335.50"></text></g><g><title>pcls::gfx::draw_circle (10 samples, 0.02%)</title><rect x="16.5383%" y="309" width="0.0193%" height="15" fill="rgb(215,43,3)" fg:x="8567" fg:w="10"/><text x="16.7883%" y="319.50"></text></g><g><title>__CFRunLoopDoObservers (8,490 samples, 16.39%)</title><rect x="0.1795%" y="421" width="16.3896%" height="15" fill="rgb(238,154,13)" fg:x="93" fg:w="8490"/><text x="0.4295%" y="431.50">__CFRunLoopDoObservers</text></g><g><title>__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ (8,489 samples, 16.39%)</title><rect x="0.1815%" y="405" width="16.3877%" height="15" fill="rgb(219,56,2)" fg:x="94" fg:w="8489"/><text x="0.4315%" y="415.50">__CFRUNLOOP_IS_CALLING_OU..</text></g><g><title>winit::platform_impl::platform::observer::control_flow_end_handler (6,865 samples, 13.25%)</title><rect x="3.3165%" y="389" width="13.2526%" height="15" fill="rgb(233,0,4)" fg:x="1718" fg:w="6865"/><text x="3.5665%" y="399.50">winit::platform_impl..</text></g><g><title>winit::platform_impl::platform::app_state::AppState::cleared (6,865 samples, 13.25%)</title><rect x="3.3165%" y="373" width="13.2526%" height="15" fill="rgb(235,30,7)" fg:x="1718" fg:w="6865"/><text x="3.5665%" y="383.50">winit::platform_impl..</text></g><g><title>winit::platform_impl::platform::app_state::Handler::handle_nonuser_event (6,865 samples, 13.25%)</title><rect x="3.3165%" y="357" width="13.2526%" height="15" fill="rgb(250,79,13)" fg:x="1718" fg:w="6865"/><text x="3.5665%" y="367.50">winit::platform_impl..</text></g><g><title>&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_nonuser_event::_{{closure}} (6,865 samples, 13.25%)</title><rect x="3.3165%" y="341" width="13.2526%" height="15" fill="rgb(211,146,34)" fg:x="1718" fg:w="6865"/><text x="3.5665%" y="351.50">&lt;winit::platform_imp..</text></g><g><title>winit::window::Window::set_title (6 samples, 0.01%)</title><rect x="16.5576%" y="325" width="0.0116%" height="15" fill="rgb(228,22,38)" fg:x="8577" fg:w="6"/><text x="16.8076%" y="335.50"></text></g><g><title>winit::platform_impl::platform::util::async::set_title_sync (6 samples, 0.01%)</title><rect x="16.5576%" y="309" width="0.0116%" height="15" fill="rgb(235,168,5)" fg:x="8577" fg:w="6"/><text x="16.8076%" y="319.50"></text></g><g><title>-[NSWindow _dosetTitle:andDefeatWrap:] (6 samples, 0.01%)</title><rect x="16.5576%" y="293" width="0.0116%" height="15" fill="rgb(221,155,16)" fg:x="8577" fg:w="6"/><text x="16.8076%" y="303.50"></text></g><g><title>-[NSWindowTitleController _propertiesChanged:] (6 samples, 0.01%)</title><rect x="16.5576%" y="277" width="0.0116%" height="15" fill="rgb(215,215,53)" fg:x="8577" fg:w="6"/><text x="16.8076%" y="287.50"></text></g><g><title>__CFRunLoopDoTimers (74 samples, 0.14%)</title><rect x="16.5692%" y="421" width="0.1429%" height="15" fill="rgb(223,4,10)" fg:x="8583" fg:w="74"/><text x="16.8192%" y="431.50"></text></g><g><title>__CFRunLoopDoTimer (74 samples, 0.14%)</title><rect x="16.5692%" y="405" width="0.1429%" height="15" fill="rgb(234,103,6)" fg:x="8583" fg:w="74"/><text x="16.8192%" y="415.50"></text></g><g><title>CFRunLoopRunSpecific (8,570 samples, 16.54%)</title><rect x="0.1718%" y="453" width="16.5441%" height="15" fill="rgb(227,97,0)" fg:x="89" fg:w="8570"/><text x="0.4218%" y="463.50">CFRunLoopRunSpecific</text></g><g><title>__CFRunLoopRun (8,568 samples, 16.54%)</title><rect x="0.1757%" y="437" width="16.5402%" height="15" fill="rgb(234,150,53)" fg:x="91" fg:w="8568"/><text x="0.4257%" y="447.50">__CFRunLoopRun</text></g><g><title>winit::event_loop::EventLoop&lt;T&gt;::run (8,598 samples, 16.60%)</title><rect x="0.1197%" y="581" width="16.5981%" height="15" fill="rgb(228,201,54)" fg:x="62" fg:w="8598"/><text x="0.3697%" y="591.50">winit::event_loop::EventLo..</text></g><g><title>winit::platform_impl::platform::event_loop::EventLoop&lt;T&gt;::run_return::_{{closure}} (8,598 samples, 16.60%)</title><rect x="0.1197%" y="565" width="16.5981%" height="15" fill="rgb(222,22,37)" fg:x="62" fg:w="8598"/><text x="0.3697%" y="575.50">winit::platform_impl::plat..</text></g><g><title>-[NSApplication run] (8,598 samples, 16.60%)</title><rect x="0.1197%" y="549" width="16.5981%" height="15" fill="rgb(237,53,32)" fg:x="62" fg:w="8598"/><text x="0.3697%" y="559.50">-[NSApplication run]</text></g><g><title>-[NSApplication(NSEventRouting) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] (8,587 samples, 16.58%)</title><rect x="0.1409%" y="533" width="16.5769%" height="15" fill="rgb(233,25,53)" fg:x="73" fg:w="8587"/><text x="0.3909%" y="543.50">-[NSApplication(NSEventRou..</text></g><g><title>_DPSNextEvent (8,587 samples, 16.58%)</title><rect x="0.1409%" y="517" width="16.5769%" height="15" fill="rgb(210,40,34)" fg:x="73" fg:w="8587"/><text x="0.3909%" y="527.50">_DPSNextEvent</text></g><g><title>_BlockUntilNextEventMatchingListInModeWithFilter (8,571 samples, 16.55%)</title><rect x="0.1718%" y="501" width="16.5460%" height="15" fill="rgb(241,220,44)" fg:x="89" fg:w="8571"/><text x="0.4218%" y="511.50">_BlockUntilNextEventMatchi..</text></g><g><title>ReceiveNextEventCommon (8,571 samples, 16.55%)</title><rect x="0.1718%" y="485" width="16.5460%" height="15" fill="rgb(235,28,35)" fg:x="89" fg:w="8571"/><text x="0.4218%" y="495.50">ReceiveNextEventCommon</text></g><g><title>RunCurrentEventLoopInMode (8,571 samples, 16.55%)</title><rect x="0.1718%" y="469" width="16.5460%" height="15" fill="rgb(210,56,17)" fg:x="89" fg:w="8571"/><text x="0.4218%" y="479.50">RunCurrentEventLoopInMode</text></g><g><title>-[NSApplication init] (8 samples, 0.02%)</title><rect x="16.7178%" y="533" width="0.0154%" height="15" fill="rgb(224,130,29)" fg:x="8660" fg:w="8"/><text x="16.9678%" y="543.50"></text></g><g><title>+[NSApplication sharedApplication] (9 samples, 0.02%)</title><rect x="16.7178%" y="549" width="0.0174%" height="15" fill="rgb(235,212,8)" fg:x="8660" fg:w="9"/><text x="16.9678%" y="559.50"></text></g><g><title>winit::event_loop::EventLoopBuilder&lt;T&gt;::build (10 samples, 0.02%)</title><rect x="16.7178%" y="581" width="0.0193%" height="15" fill="rgb(223,33,50)" fg:x="8660" fg:w="10"/><text x="16.9678%" y="591.50"></text></g><g><title>&lt;() as objc2::message::MessageArguments&gt;::__invoke (10 samples, 0.02%)</title><rect x="16.7178%" y="565" width="0.0193%" height="15" fill="rgb(219,149,13)" fg:x="8660" fg:w="10"/><text x="16.9678%" y="575.50"></text></g><g><title>-[NSThemeFrame initWithFrame:styleMask:owner:] (6 samples, 0.01%)</title><rect x="16.7391%" y="501" width="0.0116%" height="15" fill="rgb(250,156,29)" fg:x="8671" fg:w="6"/><text x="16.9891%" y="511.50"></text></g><g><title>-[NSWindow _commonInitFrame:styleMask:backing:defer:] (10 samples, 0.02%)</title><rect x="16.7391%" y="517" width="0.0193%" height="15" fill="rgb(216,193,19)" fg:x="8671" fg:w="10"/><text x="16.9891%" y="527.50"></text></g><g><title>-[NSWindow initWithContentRect:styleMask:backing:defer:] (11 samples, 0.02%)</title><rect x="16.7391%" y="549" width="0.0212%" height="15" fill="rgb(216,135,14)" fg:x="8671" fg:w="11"/><text x="16.9891%" y="559.50"></text></g><g><title>-[NSWindow _initContent:styleMask:backing:defer:contentView:] (11 samples, 0.02%)</title><rect x="16.7391%" y="533" width="0.0212%" height="15" fill="rgb(241,47,5)" fg:x="8671" fg:w="11"/><text x="16.9891%" y="543.50"></text></g><g><title>start (8,629 samples, 16.66%)</title><rect x="0.1081%" y="677" width="16.6580%" height="15" fill="rgb(233,42,35)" fg:x="56" fg:w="8629"/><text x="0.3581%" y="687.50">start</text></g><g><title>main (8,627 samples, 16.65%)</title><rect x="0.1120%" y="661" width="16.6541%" height="15" fill="rgb(231,13,6)" fg:x="58" fg:w="8627"/><text x="0.3620%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (8,627 samples, 16.65%)</title><rect x="0.1120%" y="645" width="16.6541%" height="15" fill="rgb(207,181,40)" fg:x="58" fg:w="8627"/><text x="0.3620%" y="655.50">std::rt::lang_start_intern..</text></g><g><title>std::rt::lang_start::_{{closure}} (8,627 samples, 16.65%)</title><rect x="0.1120%" y="629" width="16.6541%" height="15" fill="rgb(254,173,49)" fg:x="58" fg:w="8627"/><text x="0.3620%" y="639.50">std::rt::lang_start::_{{cl..</text></g><g><title>core::ops::function::FnOnce::call_once (8,627 samples, 16.65%)</title><rect x="0.1120%" y="613" width="16.6541%" height="15" fill="rgb(221,1,38)" fg:x="58" fg:w="8627"/><text x="0.3620%" y="623.50">core::ops::function::FnOnc..</text></g><g><title>pcls::main (8,627 samples, 16.65%)</title><rect x="0.1120%" y="597" width="16.6541%" height="15" fill="rgb(206,124,46)" fg:x="58" fg:w="8627"/><text x="0.3620%" y="607.50">pcls::main</text></g><g><title>winit::platform_impl::platform::Window::new::_{{closure}} (15 samples, 0.03%)</title><rect x="16.7371%" y="581" width="0.0290%" height="15" fill="rgb(249,21,11)" fg:x="8670" fg:w="15"/><text x="16.9871%" y="591.50"></text></g><g><title>winit::platform_impl::platform::window::WinitWindow::new (15 samples, 0.03%)</title><rect x="16.7371%" y="565" width="0.0290%" height="15" fill="rgb(222,201,40)" fg:x="8670" fg:w="15"/><text x="16.9871%" y="575.50"></text></g><g><title>__47+[FPCAMetalLayerState _updateLayerState:block:]_block_invoke (7 samples, 0.01%)</title><rect x="16.7912%" y="549" width="0.0135%" height="15" fill="rgb(235,61,29)" fg:x="8698" fg:w="7"/><text x="17.0412%" y="559.50"></text></g><g><title>_dispatch_call_block_and_release (18 samples, 0.03%)</title><rect x="16.7854%" y="565" width="0.0347%" height="15" fill="rgb(219,207,3)" fg:x="8695" fg:w="18"/><text x="17.0354%" y="575.50"></text></g><g><title>_dispatch_client_callout (30 samples, 0.06%)</title><rect x="16.7777%" y="581" width="0.0579%" height="15" fill="rgb(222,56,46)" fg:x="8691" fg:w="30"/><text x="17.0277%" y="591.50"></text></g><g><title>invoke_presented_callback(void*) (7 samples, 0.01%)</title><rect x="16.8221%" y="565" width="0.0135%" height="15" fill="rgb(239,76,54)" fg:x="8714" fg:w="7"/><text x="17.0721%" y="575.50"></text></g><g><title>layer_presented(_CAImageQueue*, unsigned int, double, double, double, void*) (7 samples, 0.01%)</title><rect x="16.8221%" y="549" width="0.0135%" height="15" fill="rgb(231,124,27)" fg:x="8714" fg:w="7"/><text x="17.0721%" y="559.50"></text></g><g><title>-[_MTLCommandBuffer didScheduleWithStartTime:endTime:error:] (9 samples, 0.02%)</title><rect x="16.8394%" y="453" width="0.0174%" height="15" fill="rgb(249,195,6)" fg:x="8723" fg:w="9"/><text x="17.0894%" y="463.50"></text></g><g><title>-[_MTLCommandQueue commandBufferDidComplete:startTime:completionTime:error:] (8 samples, 0.02%)</title><rect x="16.8568%" y="453" width="0.0154%" height="15" fill="rgb(237,174,47)" fg:x="8732" fg:w="8"/><text x="17.1068%" y="463.50"></text></g><g><title>-[IOGPUMetalCommandBuffer didCompleteWithStartTime:endTime:error:] (8 samples, 0.02%)</title><rect x="16.8568%" y="437" width="0.0154%" height="15" fill="rgb(206,201,31)" fg:x="8732" fg:w="8"/><text x="17.1068%" y="447.50"></text></g><g><title>_dispatch_client_callout4 (21 samples, 0.04%)</title><rect x="16.8375%" y="501" width="0.0405%" height="15" fill="rgb(231,57,52)" fg:x="8722" fg:w="21"/><text x="17.0875%" y="511.50"></text></g><g><title>__IOGPUNotificationQueueSetDispatchQueue_block_invoke (21 samples, 0.04%)</title><rect x="16.8375%" y="485" width="0.0405%" height="15" fill="rgb(248,177,22)" fg:x="8722" fg:w="21"/><text x="17.0875%" y="495.50"></text></g><g><title>IOGPUNotificationQueueDispatchAvailableCompletionNotifications (20 samples, 0.04%)</title><rect x="16.8394%" y="469" width="0.0386%" height="15" fill="rgb(215,211,37)" fg:x="8723" fg:w="20"/><text x="17.0894%" y="479.50"></text></g><g><title>_dispatch_lane_invoke (24 samples, 0.05%)</title><rect x="16.8356%" y="581" width="0.0463%" height="15" fill="rgb(241,128,51)" fg:x="8721" fg:w="24"/><text x="17.0856%" y="591.50"></text></g><g><title>_dispatch_lane_serial_drain (24 samples, 0.05%)</title><rect x="16.8356%" y="565" width="0.0463%" height="15" fill="rgb(227,165,31)" fg:x="8721" fg:w="24"/><text x="17.0856%" y="575.50"></text></g><g><title>_dispatch_mach_invoke (24 samples, 0.05%)</title><rect x="16.8356%" y="549" width="0.0463%" height="15" fill="rgb(228,167,24)" fg:x="8721" fg:w="24"/><text x="17.0856%" y="559.50"></text></g><g><title>_dispatch_lane_serial_drain (24 samples, 0.05%)</title><rect x="16.8356%" y="533" width="0.0463%" height="15" fill="rgb(228,143,12)" fg:x="8721" fg:w="24"/><text x="17.0856%" y="543.50"></text></g><g><title>_dispatch_mach_msg_invoke (24 samples, 0.05%)</title><rect x="16.8356%" y="517" width="0.0463%" height="15" fill="rgb(249,149,8)" fg:x="8721" fg:w="24"/><text x="17.0856%" y="527.50"></text></g><g><title>mach_msg2_internal (131 samples, 0.25%)</title><rect x="16.8877%" y="421" width="0.2529%" height="15" fill="rgb(243,35,44)" fg:x="8748" fg:w="131"/><text x="17.1377%" y="431.50"></text></g><g><title>mach_msg2_trap (131 samples, 0.25%)</title><rect x="16.8877%" y="405" width="0.2529%" height="15" fill="rgb(246,89,9)" fg:x="8748" fg:w="131"/><text x="17.1377%" y="415.50"></text></g><g><title>IOConnectCallMethod (172 samples, 0.33%)</title><rect x="16.8877%" y="453" width="0.3320%" height="15" fill="rgb(233,213,13)" fg:x="8748" fg:w="172"/><text x="17.1377%" y="463.50"></text></g><g><title>io_connect_method (172 samples, 0.33%)</title><rect x="16.8877%" y="437" width="0.3320%" height="15" fill="rgb(233,141,41)" fg:x="8748" fg:w="172"/><text x="17.1377%" y="447.50"></text></g><g><title>mach_msg2_trap (41 samples, 0.08%)</title><rect x="17.1406%" y="421" width="0.0791%" height="15" fill="rgb(239,167,4)" fg:x="8879" fg:w="41"/><text x="17.3906%" y="431.50"></text></g><g><title>IOGPUCommandQueueSubmitCommandBuffers (174 samples, 0.34%)</title><rect x="16.8858%" y="469" width="0.3359%" height="15" fill="rgb(209,217,16)" fg:x="8747" fg:w="174"/><text x="17.1358%" y="479.50"></text></g><g><title>iokit_user_client_trap (6 samples, 0.01%)</title><rect x="17.2217%" y="469" width="0.0116%" height="15" fill="rgb(219,88,35)" fg:x="8921" fg:w="6"/><text x="17.4717%" y="479.50"></text></g><g><title>-[IOGPUMetalCommandQueue submitCommandBuffers:count:] (182 samples, 0.35%)</title><rect x="16.8838%" y="501" width="0.3513%" height="15" fill="rgb(220,193,23)" fg:x="8746" fg:w="182"/><text x="17.1338%" y="511.50"></text></g><g><title>-[IOGPUMetalCommandQueue _submitCommandBuffers:count:] (182 samples, 0.35%)</title><rect x="16.8838%" y="485" width="0.3513%" height="15" fill="rgb(230,90,52)" fg:x="8746" fg:w="182"/><text x="17.1338%" y="495.50"></text></g><g><title>-[_MTLCommandQueue _submitAvailableCommandBuffers] (183 samples, 0.35%)</title><rect x="16.8838%" y="517" width="0.3533%" height="15" fill="rgb(252,106,19)" fg:x="8746" fg:w="183"/><text x="17.1338%" y="527.50"></text></g><g><title>_IODispatchCalloutWithDispatch (6 samples, 0.01%)</title><rect x="17.2371%" y="501" width="0.0116%" height="15" fill="rgb(206,74,20)" fg:x="8929" fg:w="6"/><text x="17.4871%" y="511.50"></text></g><g><title>IODispatchCalloutFromCFMessage (6 samples, 0.01%)</title><rect x="17.2371%" y="485" width="0.0116%" height="15" fill="rgb(230,138,44)" fg:x="8929" fg:w="6"/><text x="17.4871%" y="495.50"></text></g><g><title>_ioSurfaceEventNotificationCallback2 (6 samples, 0.01%)</title><rect x="17.2371%" y="469" width="0.0116%" height="15" fill="rgb(235,182,43)" fg:x="8929" fg:w="6"/><text x="17.4871%" y="479.50"></text></g><g><title>layer_private_present_impl(_CAMetalLayerPrivate*, CAMetalDrawable*, double, unsigned int) (6 samples, 0.01%)</title><rect x="17.2371%" y="453" width="0.0116%" height="15" fill="rgb(242,16,51)" fg:x="8929" fg:w="6"/><text x="17.4871%" y="463.50"></text></g><g><title>CAImageQueueInsertImage_ (6 samples, 0.01%)</title><rect x="17.2371%" y="437" width="0.0116%" height="15" fill="rgb(248,9,4)" fg:x="8929" fg:w="6"/><text x="17.4871%" y="447.50"></text></g><g><title>dispatch_mig_server (8 samples, 0.02%)</title><rect x="17.2371%" y="517" width="0.0154%" height="15" fill="rgb(210,31,22)" fg:x="8929" fg:w="8"/><text x="17.4871%" y="527.50"></text></g><g><title>_dispatch_lane_serial_drain (253 samples, 0.49%)</title><rect x="16.7738%" y="597" width="0.4884%" height="15" fill="rgb(239,54,39)" fg:x="8689" fg:w="253"/><text x="17.0238%" y="607.50"></text></g><g><title>_dispatch_source_invoke (197 samples, 0.38%)</title><rect x="16.8819%" y="581" width="0.3803%" height="15" fill="rgb(230,99,41)" fg:x="8745" fg:w="197"/><text x="17.1319%" y="591.50"></text></g><g><title>_dispatch_source_latch_and_call (196 samples, 0.38%)</title><rect x="16.8838%" y="565" width="0.3784%" height="15" fill="rgb(253,106,12)" fg:x="8746" fg:w="196"/><text x="17.1338%" y="575.50"></text></g><g><title>_dispatch_continuation_pop (196 samples, 0.38%)</title><rect x="16.8838%" y="549" width="0.3784%" height="15" fill="rgb(213,46,41)" fg:x="8746" fg:w="196"/><text x="17.1338%" y="559.50"></text></g><g><title>_dispatch_client_callout (196 samples, 0.38%)</title><rect x="16.8838%" y="533" width="0.3784%" height="15" fill="rgb(215,133,35)" fg:x="8746" fg:w="196"/><text x="17.1338%" y="543.50"></text></g><g><title>_pthread_wqthread (259 samples, 0.50%)</title><rect x="16.7661%" y="661" width="0.5000%" height="15" fill="rgb(213,28,5)" fg:x="8685" fg:w="259"/><text x="17.0161%" y="671.50"></text></g><g><title>_dispatch_workloop_worker_thread (258 samples, 0.50%)</title><rect x="16.7680%" y="645" width="0.4981%" height="15" fill="rgb(215,77,49)" fg:x="8686" fg:w="258"/><text x="17.0180%" y="655.50"></text></g><g><title>_dispatch_root_queue_drain_deferred_wlh (256 samples, 0.49%)</title><rect x="16.7719%" y="629" width="0.4942%" height="15" fill="rgb(248,100,22)" fg:x="8688" fg:w="256"/><text x="17.0219%" y="639.50"></text></g><g><title>_dispatch_lane_invoke (256 samples, 0.49%)</title><rect x="16.7719%" y="613" width="0.4942%" height="15" fill="rgb(208,67,9)" fg:x="8688" fg:w="256"/><text x="17.0219%" y="623.50"></text></g><g><title>start_wqthread (442 samples, 0.85%)</title><rect x="16.7661%" y="677" width="0.8533%" height="15" fill="rgb(219,133,21)" fg:x="8685" fg:w="442"/><text x="17.0161%" y="687.50"></text></g><g><title>thread_start (183 samples, 0.35%)</title><rect x="17.2661%" y="661" width="0.3533%" height="15" fill="rgb(246,46,29)" fg:x="8944" fg:w="183"/><text x="17.5161%" y="671.50"></text></g><g><title>__thread_selfid (21 samples, 0.04%)</title><rect x="17.6194%" y="661" width="0.0405%" height="15" fill="rgb(246,185,52)" fg:x="9127" fg:w="21"/><text x="17.8694%" y="671.50"></text></g><g><title>_SLEventRecordCreateWithBytesModern(void const*, unsigned long, unsigned int) (7 samples, 0.01%)</title><rect x="17.6869%" y="437" width="0.0135%" height="15" fill="rgb(252,136,11)" fg:x="9162" fg:w="7"/><text x="17.9369%" y="447.50"></text></g><g><title>SLS::TokenizedCoding::VersionedDecoder&lt;(SLS::TokenizedCoding::Version)3&gt;::decode_with_manager_b(bool (SLS::TokenizedCoding::Token&lt;(SLS::TokenizedCoding::Version)3&gt;, SLS::TokenizedCoding::VersionedDecoder&lt;(SLS::TokenizedCoding::Version)3&gt;&amp;) block_pointer) (7 samples, 0.01%)</title><rect x="17.6869%" y="421" width="0.0135%" height="15" fill="rgb(219,138,53)" fg:x="9162" fg:w="7"/><text x="17.9369%" y="431.50"></text></g><g><title>SLS::TokenizedCoding::ReadDataProvider::with_slice_b(unsigned long, void (std::__1::shared_ptr&lt;SLS::TokenizedCoding::ReadDataProvider&gt;&amp;) block_pointer) (6 samples, 0.01%)</title><rect x="17.6888%" y="405" width="0.0116%" height="15" fill="rgb(211,51,23)" fg:x="9163" fg:w="6"/><text x="17.9388%" y="415.50"></text></g><g><title>invocation function for block in SLS::TokenizedCoding::VersionedDecoder&lt;(SLS::TokenizedCoding::Version)3&gt;::with_slice_b(unsigned long, void (SLS::TokenizedCoding::VersionedDecoder&lt;(SLS::TokenizedCoding::Version)3&gt;&amp;) block_pointer) (6 samples, 0.01%)</title><rect x="17.6888%" y="389" width="0.0116%" height="15" fill="rgb(247,221,28)" fg:x="9163" fg:w="6"/><text x="17.9388%" y="399.50"></text></g><g><title>invocation function for block in SLS::TokenizedCoding::VersionedDecoder&lt;(SLS::TokenizedCoding::Version)3&gt;::decode_with_manager_b(bool (SLS::TokenizedCoding::Token&lt;(SLS::TokenizedCoding::Version)3&gt;, SLS::TokenizedCoding::VersionedDecoder&lt;(SLS::TokenizedCoding::Version)3&gt;&amp;) block_pointer) (6 samples, 0.01%)</title><rect x="17.6888%" y="373" width="0.0116%" height="15" fill="rgb(251,222,45)" fg:x="9163" fg:w="6"/><text x="17.9388%" y="383.50"></text></g><g><title>invocation function for block in auto bool SLS::TokenizedCoding::Decoder::decode_with_manager&lt;_SLEventRecordCreateWithBytesModern(void const*, unsigned long, unsigned int)::$_0&gt;(_SLEventRecordCreateWithBytesModern(void const*, unsigned long, unsigned int)::$_0&amp;&amp;)::&apos;lambda&apos;(_SLEventRecordCreateWithBytesModern(void const*, unsigned long, unsigned int)::$_0&amp;)::operator()&lt;SLS::TokenizedCoding::VersionedDecoder&lt;(SLS::TokenizedCoding::Version)3&gt;&gt;(_SLEventRecordCreateWithBytesModern(void const*, unsigned long, unsigned int)::$_0&amp;) const (6 samples, 0.01%)</title><rect x="17.6888%" y="357" width="0.0116%" height="15" fill="rgb(217,162,53)" fg:x="9163" fg:w="6"/><text x="17.9388%" y="367.50"></text></g><g><title>event_datagram_handler(unsigned int, CGSDatagramType, void*, unsigned long, void*) (9 samples, 0.02%)</title><rect x="17.6850%" y="469" width="0.0174%" height="15" fill="rgb(229,93,14)" fg:x="9161" fg:w="9"/><text x="17.9350%" y="479.50"></text></g><g><title>CGSDecodeEventRecord (8 samples, 0.02%)</title><rect x="17.6869%" y="453" width="0.0154%" height="15" fill="rgb(209,67,49)" fg:x="9162" fg:w="8"/><text x="17.9369%" y="463.50"></text></g><g><title>mach_msg2_internal (6 samples, 0.01%)</title><rect x="17.7024%" y="437" width="0.0116%" height="15" fill="rgb(213,87,29)" fg:x="9170" fg:w="6"/><text x="17.9524%" y="447.50"></text></g><g><title>mach_msg2_trap (6 samples, 0.01%)</title><rect x="17.7024%" y="421" width="0.0116%" height="15" fill="rgb(205,151,52)" fg:x="9170" fg:w="6"/><text x="17.9524%" y="431.50"></text></g><g><title>mach_msg (14 samples, 0.03%)</title><rect x="17.7024%" y="469" width="0.0270%" height="15" fill="rgb(253,215,39)" fg:x="9170" fg:w="14"/><text x="17.9524%" y="479.50"></text></g><g><title>mach_msg_overwrite (14 samples, 0.03%)</title><rect x="17.7024%" y="453" width="0.0270%" height="15" fill="rgb(221,220,41)" fg:x="9170" fg:w="14"/><text x="17.9524%" y="463.50"></text></g><g><title>mach_msg2_trap (8 samples, 0.02%)</title><rect x="17.7139%" y="437" width="0.0154%" height="15" fill="rgb(218,133,21)" fg:x="9176" fg:w="8"/><text x="17.9639%" y="447.50"></text></g><g><title>SLEventCreateNextEvent (30 samples, 0.06%)</title><rect x="17.6734%" y="517" width="0.0579%" height="15" fill="rgb(221,193,43)" fg:x="9155" fg:w="30"/><text x="17.9234%" y="527.50"></text></g><g><title>SLSGetNextEventRecordInternal (30 samples, 0.06%)</title><rect x="17.6734%" y="501" width="0.0579%" height="15" fill="rgb(240,128,52)" fg:x="9155" fg:w="30"/><text x="17.9234%" y="511.50"></text></g><g><title>CGSSnarfAndDispatchDatagrams (27 samples, 0.05%)</title><rect x="17.6792%" y="485" width="0.0521%" height="15" fill="rgb(253,114,12)" fg:x="9158" fg:w="27"/><text x="17.9292%" y="495.50"></text></g><g><title>MessageHandler(__CFMachPort*, void*, long, void*) (35 samples, 0.07%)</title><rect x="17.6657%" y="549" width="0.0676%" height="15" fill="rgb(215,223,47)" fg:x="9151" fg:w="35"/><text x="17.9157%" y="559.50"></text></g><g><title>PullEventsFromWindowServerOnConnection(unsigned int, unsigned char, __CFMachPortBoost*) (35 samples, 0.07%)</title><rect x="17.6657%" y="533" width="0.0676%" height="15" fill="rgb(248,225,23)" fg:x="9151" fg:w="35"/><text x="17.9157%" y="543.50"></text></g><g><title>__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ (38 samples, 0.07%)</title><rect x="17.6657%" y="581" width="0.0734%" height="15" fill="rgb(250,108,0)" fg:x="9151" fg:w="38"/><text x="17.9157%" y="591.50"></text></g><g><title>__CFMachPortPerform (38 samples, 0.07%)</title><rect x="17.6657%" y="565" width="0.0734%" height="15" fill="rgb(228,208,7)" fg:x="9151" fg:w="38"/><text x="17.9157%" y="575.50"></text></g><g><title>__CFRunLoopDoSource1 (39 samples, 0.08%)</title><rect x="17.6657%" y="597" width="0.0753%" height="15" fill="rgb(244,45,10)" fg:x="9151" fg:w="39"/><text x="17.9157%" y="607.50"></text></g><g><title>mach_msg (6 samples, 0.01%)</title><rect x="17.7410%" y="581" width="0.0116%" height="15" fill="rgb(207,125,25)" fg:x="9190" fg:w="6"/><text x="17.9910%" y="591.50"></text></g><g><title>mach_msg_overwrite (6 samples, 0.01%)</title><rect x="17.7410%" y="565" width="0.0116%" height="15" fill="rgb(210,195,18)" fg:x="9190" fg:w="6"/><text x="17.9910%" y="575.50"></text></g><g><title>__CFRunLoopServiceMachPort (7 samples, 0.01%)</title><rect x="17.7410%" y="597" width="0.0135%" height="15" fill="rgb(249,80,12)" fg:x="9190" fg:w="7"/><text x="17.9910%" y="607.50"></text></g><g><title>CFRunLoopRunSpecific (47 samples, 0.09%)</title><rect x="17.6657%" y="629" width="0.0907%" height="15" fill="rgb(221,65,9)" fg:x="9151" fg:w="47"/><text x="17.9157%" y="639.50"></text></g><g><title>__CFRunLoopRun (47 samples, 0.09%)</title><rect x="17.6657%" y="613" width="0.0907%" height="15" fill="rgb(235,49,36)" fg:x="9151" fg:w="47"/><text x="17.9157%" y="623.50"></text></g><g><title>_NSEventThread (48 samples, 0.09%)</title><rect x="17.6657%" y="645" width="0.0927%" height="15" fill="rgb(225,32,20)" fg:x="9151" fg:w="48"/><text x="17.9157%" y="655.50"></text></g><g><title>__disable_threadsignal (9 samples, 0.02%)</title><rect x="17.7583%" y="645" width="0.0174%" height="15" fill="rgb(215,141,46)" fg:x="9199" fg:w="9"/><text x="18.0083%" y="655.50"></text></g><g><title>__munmap (39 samples, 0.08%)</title><rect x="17.7757%" y="645" width="0.0753%" height="15" fill="rgb(250,160,47)" fg:x="9208" fg:w="39"/><text x="18.0257%" y="655.50"></text></g><g><title>__sigaltstack (15 samples, 0.03%)</title><rect x="17.8510%" y="645" width="0.0290%" height="15" fill="rgb(216,222,40)" fg:x="9247" fg:w="15"/><text x="18.1010%" y="655.50"></text></g><g><title>__thread_selfid (79 samples, 0.15%)</title><rect x="17.8800%" y="645" width="0.1525%" height="15" fill="rgb(234,217,39)" fg:x="9262" fg:w="79"/><text x="18.1300%" y="655.50"></text></g><g><title>__disable_threadsignal (23 samples, 0.04%)</title><rect x="18.0325%" y="629" width="0.0444%" height="15" fill="rgb(207,178,40)" fg:x="9341" fg:w="23"/><text x="18.2825%" y="639.50"></text></g><g><title>_platform_memset (52 samples, 0.10%)</title><rect x="18.0769%" y="629" width="0.1004%" height="15" fill="rgb(221,136,13)" fg:x="9364" fg:w="52"/><text x="18.3269%" y="639.50"></text></g><g><title>_platform_memset (201 samples, 0.39%)</title><rect x="18.1850%" y="613" width="0.3880%" height="15" fill="rgb(249,199,10)" fg:x="9420" fg:w="201"/><text x="18.4350%" y="623.50"></text></g><g><title>_pthread_terminate (19 samples, 0.04%)</title><rect x="18.5730%" y="613" width="0.0367%" height="15" fill="rgb(249,222,13)" fg:x="9621" fg:w="19"/><text x="18.8230%" y="623.50"></text></g><g><title>__bsdthread_terminate (18 samples, 0.03%)</title><rect x="18.5749%" y="597" width="0.0347%" height="15" fill="rgb(244,185,38)" fg:x="9622" fg:w="18"/><text x="18.8249%" y="607.50"></text></g><g><title>_pthread_terminate_invoke (224 samples, 0.43%)</title><rect x="18.1792%" y="629" width="0.4324%" height="15" fill="rgb(236,202,9)" fg:x="9417" fg:w="224"/><text x="18.4292%" y="639.50"></text></g><g><title>_dispatch_dispose (10 samples, 0.02%)</title><rect x="18.9861%" y="533" width="0.0193%" height="15" fill="rgb(250,229,37)" fg:x="9835" fg:w="10"/><text x="19.2361%" y="543.50"></text></g><g><title>objc_destructInstance (9 samples, 0.02%)</title><rect x="18.9881%" y="517" width="0.0174%" height="15" fill="rgb(206,174,23)" fg:x="9836" fg:w="9"/><text x="19.2381%" y="527.50"></text></g><g><title>objc_destructInstance_nonnull_realized(objc_object*) (9 samples, 0.02%)</title><rect x="18.9881%" y="501" width="0.0174%" height="15" fill="rgb(211,33,43)" fg:x="9836" fg:w="9"/><text x="19.2381%" y="511.50"></text></g><g><title>_object_remove_associations (9 samples, 0.02%)</title><rect x="18.9881%" y="485" width="0.0174%" height="15" fill="rgb(245,58,50)" fg:x="9836" fg:w="9"/><text x="19.2381%" y="495.50"></text></g><g><title>objc::DenseMapBase&lt;objc::DenseMap&lt;DisguisedPtr&lt;objc_object&gt;, objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;, objc::DenseMapValueInfo&lt;objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;&gt;, objc::DenseMapInfo&lt;DisguisedPtr&lt;objc_object&gt;&gt;, objc::detail::DenseMapPair&lt;DisguisedPtr&lt;objc_object&gt;, objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;&gt;&gt;, DisguisedPtr&lt;objc_object&gt;, objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;, objc::DenseMapValueInfo&lt;objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;&gt;, objc::DenseMapInfo&lt;DisguisedPtr&lt;objc_object&gt;&gt;, objc::detail::DenseMapPair&lt;DisguisedPtr&lt;objc_object&gt;, objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;&gt;&gt;::find(DisguisedPtr&lt;objc_object&gt; const&amp;) (6 samples, 0.01%)</title><rect x="18.9938%" y="469" width="0.0116%" height="15" fill="rgb(244,68,36)" fg:x="9839" fg:w="6"/><text x="19.2438%" y="479.50"></text></g><g><title>bool objc::DenseMapBase&lt;objc::DenseMap&lt;DisguisedPtr&lt;objc_object&gt;, objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;, objc::DenseMapValueInfo&lt;objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;&gt;, objc::DenseMapInfo&lt;DisguisedPtr&lt;objc_object&gt;&gt;, objc::detail::DenseMapPair&lt;DisguisedPtr&lt;objc_object&gt;, objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;&gt;&gt;, DisguisedPtr&lt;objc_object&gt;, objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;, objc::DenseMapValueInfo&lt;objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;&gt;, objc::DenseMapInfo&lt;DisguisedPtr&lt;objc_object&gt;&gt;, objc::detail::DenseMapPair&lt;DisguisedPtr&lt;objc_object&gt;, objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;&gt;&gt;::LookupBucketFor&lt;DisguisedPtr&lt;objc_object&gt;&gt;(DisguisedPtr&lt;objc_object&gt; const&amp;, objc::detail::DenseMapPair&lt;DisguisedPtr&lt;objc_object&gt;, objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt;&gt;&gt; const*&amp;) const (6 samples, 0.01%)</title><rect x="18.9938%" y="453" width="0.0116%" height="15" fill="rgb(232,229,15)" fg:x="9839" fg:w="6"/><text x="19.2438%" y="463.50"></text></g><g><title>dyld::ThreadLocalVariables::finalizeList(void*) (28 samples, 0.05%)</title><rect x="18.9572%" y="613" width="0.0541%" height="15" fill="rgb(254,30,23)" fg:x="9820" fg:w="28"/><text x="19.2072%" y="623.50"></text></g><g><title>invocation function for block in dyld::ThreadLocalVariables::finalizeList(void*) (24 samples, 0.05%)</title><rect x="18.9649%" y="597" width="0.0463%" height="15" fill="rgb(235,160,14)" fg:x="9824" fg:w="24"/><text x="19.2149%" y="607.50"></text></g><g><title>std::sys::thread_local::guard::apple::enable::run_dtors (23 samples, 0.04%)</title><rect x="18.9668%" y="581" width="0.0444%" height="15" fill="rgb(212,155,44)" fg:x="9825" fg:w="23"/><text x="19.2168%" y="591.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (18 samples, 0.03%)</title><rect x="18.9765%" y="565" width="0.0347%" height="15" fill="rgb(226,2,50)" fg:x="9830" fg:w="18"/><text x="19.2265%" y="575.50"></text></g><g><title>dispatch_release (16 samples, 0.03%)</title><rect x="18.9803%" y="549" width="0.0309%" height="15" fill="rgb(234,177,6)" fg:x="9832" fg:w="16"/><text x="19.2303%" y="559.50"></text></g><g><title>_pthread_tsd_cleanup (213 samples, 0.41%)</title><rect x="18.6116%" y="629" width="0.4112%" height="15" fill="rgb(217,24,9)" fg:x="9641" fg:w="213"/><text x="18.8616%" y="639.50"></text></g><g><title>free_tiny (6 samples, 0.01%)</title><rect x="19.0112%" y="613" width="0.0116%" height="15" fill="rgb(220,13,46)" fg:x="9848" fg:w="6"/><text x="19.2612%" y="623.50"></text></g><g><title>_pthread_exit (514 samples, 0.99%)</title><rect x="18.0325%" y="645" width="0.9923%" height="15" fill="rgb(239,221,27)" fg:x="9341" fg:w="514"/><text x="18.2825%" y="655.50"></text></g><g><title>_dispatch_sema4_signal (18 samples, 0.03%)</title><rect x="19.0498%" y="581" width="0.0347%" height="15" fill="rgb(222,198,25)" fg:x="9868" fg:w="18"/><text x="19.2998%" y="591.50"></text></g><g><title>semaphore_signal_trap (18 samples, 0.03%)</title><rect x="19.0498%" y="565" width="0.0347%" height="15" fill="rgb(211,99,13)" fg:x="9868" fg:w="18"/><text x="19.2998%" y="575.50"></text></g><g><title>_dispatch_semaphore_signal_slow (23 samples, 0.04%)</title><rect x="19.0498%" y="597" width="0.0444%" height="15" fill="rgb(232,111,31)" fg:x="9868" fg:w="23"/><text x="19.2998%" y="607.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.05%)</title><rect x="19.0440%" y="629" width="0.0521%" height="15" fill="rgb(245,82,37)" fg:x="9865" fg:w="27"/><text x="19.2940%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Packet&lt;()&gt;&gt; (25 samples, 0.05%)</title><rect x="19.0479%" y="613" width="0.0483%" height="15" fill="rgb(227,149,46)" fg:x="9867" fg:w="25"/><text x="19.2979%" y="623.50"></text></g><g><title>__mprotect (50 samples, 0.10%)</title><rect x="19.0962%" y="629" width="0.0965%" height="15" fill="rgb(218,36,50)" fg:x="9892" fg:w="50"/><text x="19.3462%" y="639.50"></text></g><g><title>__munmap (74 samples, 0.14%)</title><rect x="19.1927%" y="629" width="0.1429%" height="15" fill="rgb(226,80,48)" fg:x="9942" fg:w="74"/><text x="19.4427%" y="639.50"></text></g><g><title>__sigaltstack (53 samples, 0.10%)</title><rect x="19.3355%" y="629" width="0.1023%" height="15" fill="rgb(238,224,15)" fg:x="10016" fg:w="53"/><text x="19.5855%" y="639.50"></text></g><g><title>_nanov2_free (6 samples, 0.01%)</title><rect x="19.4378%" y="629" width="0.0116%" height="15" fill="rgb(241,136,10)" fg:x="10069" fg:w="6"/><text x="19.6878%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7 samples, 0.01%)</title><rect x="19.4514%" y="629" width="0.0135%" height="15" fill="rgb(208,32,45)" fg:x="10076" fg:w="7"/><text x="19.7014%" y="639.50"></text></g><g><title>__mmap (42 samples, 0.08%)</title><rect x="19.5054%" y="613" width="0.0811%" height="15" fill="rgb(207,135,9)" fg:x="10104" fg:w="42"/><text x="19.7554%" y="623.50"></text></g><g><title>__mprotect (197 samples, 0.38%)</title><rect x="19.5865%" y="613" width="0.3803%" height="15" fill="rgb(206,86,44)" fg:x="10146" fg:w="197"/><text x="19.8365%" y="623.50"></text></g><g><title>__sigaltstack (105 samples, 0.20%)</title><rect x="19.9668%" y="613" width="0.2027%" height="15" fill="rgb(245,177,15)" fg:x="10343" fg:w="105"/><text x="20.2168%" y="623.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (13 samples, 0.03%)</title><rect x="20.1695%" y="613" width="0.0251%" height="15" fill="rgb(206,64,50)" fg:x="10448" fg:w="13"/><text x="20.4195%" y="623.50"></text></g><g><title>_pthread_mutex_firstfit_wake (11 samples, 0.02%)</title><rect x="20.1734%" y="597" width="0.0212%" height="15" fill="rgb(234,36,40)" fg:x="10450" fg:w="11"/><text x="20.4234%" y="607.50"></text></g><g><title>__psynch_mutexdrop (11 samples, 0.02%)</title><rect x="20.1734%" y="581" width="0.0212%" height="15" fill="rgb(213,64,8)" fg:x="10450" fg:w="11"/><text x="20.4234%" y="591.50"></text></g><g><title>mmap (214 samples, 0.41%)</title><rect x="20.1946%" y="613" width="0.4131%" height="15" fill="rgb(210,75,36)" fg:x="10461" fg:w="214"/><text x="20.4446%" y="623.50"></text></g><g><title>__mmap (212 samples, 0.41%)</title><rect x="20.1985%" y="597" width="0.4093%" height="15" fill="rgb(229,88,21)" fg:x="10463" fg:w="212"/><text x="20.4485%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (8 samples, 0.02%)</title><rect x="20.6405%" y="597" width="0.0154%" height="15" fill="rgb(252,204,47)" fg:x="10692" fg:w="8"/><text x="20.8905%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (7 samples, 0.01%)</title><rect x="20.6425%" y="581" width="0.0135%" height="15" fill="rgb(208,77,27)" fg:x="10693" fg:w="7"/><text x="20.8925%" y="591.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (617 samples, 1.19%)</title><rect x="19.4707%" y="629" width="1.1911%" height="15" fill="rgb(221,76,26)" fg:x="10086" fg:w="617"/><text x="19.7207%" y="639.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::thread_info::set_current_info (25 samples, 0.05%)</title><rect x="20.6135%" y="613" width="0.0483%" height="15" fill="rgb(225,139,18)" fg:x="10678" fg:w="25"/><text x="20.8635%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (9 samples, 0.02%)</title><rect x="20.6772%" y="613" width="0.0174%" height="15" fill="rgb(230,137,11)" fg:x="10711" fg:w="9"/><text x="20.9272%" y="623.50"></text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (8 samples, 0.02%)</title><rect x="20.6791%" y="597" width="0.0154%" height="15" fill="rgb(212,28,1)" fg:x="10712" fg:w="8"/><text x="20.9291%" y="607.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::thread_info::delete_current_info (18 samples, 0.03%)</title><rect x="20.6618%" y="629" width="0.0347%" height="15" fill="rgb(248,164,17)" fg:x="10703" fg:w="18"/><text x="20.9118%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.15%)</title><rect x="20.7042%" y="597" width="0.1486%" height="15" fill="rgb(222,171,42)" fg:x="10725" fg:w="77"/><text x="20.9542%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (235 samples, 0.45%)</title><rect x="20.8529%" y="597" width="0.4537%" height="15" fill="rgb(243,84,45)" fg:x="10802" fg:w="235"/><text x="21.1029%" y="607.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,305 samples, 2.52%)</title><rect x="21.3065%" y="597" width="2.5193%" height="15" fill="rgb(252,49,23)" fg:x="11037" fg:w="1305"/><text x="21.5565%" y="607.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="23.8258%" y="597" width="0.0116%" height="15" fill="rgb(215,19,7)" fg:x="12342" fg:w="6"/><text x="24.0758%" y="607.50"></text></g><g><title>&lt;pcls::array::Array3D&lt;T&gt; as core::ops::index::Index&lt;(usize,usize)&gt;&gt;::index (1,393 samples, 2.69%)</title><rect x="23.8374%" y="597" width="2.6891%" height="15" fill="rgb(238,81,41)" fg:x="12348" fg:w="1393"/><text x="24.0874%" y="607.50">&lt;p..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (329 samples, 0.64%)</title><rect x="26.5342%" y="597" width="0.6351%" height="15" fill="rgb(210,199,37)" fg:x="13745" fg:w="329"/><text x="26.7842%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (94 samples, 0.18%)</title><rect x="27.1694%" y="597" width="0.1815%" height="15" fill="rgb(244,192,49)" fg:x="14074" fg:w="94"/><text x="27.4194%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (172 samples, 0.33%)</title><rect x="27.3508%" y="597" width="0.3320%" height="15" fill="rgb(226,211,11)" fg:x="14168" fg:w="172"/><text x="27.6008%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (145 samples, 0.28%)</title><rect x="27.6829%" y="597" width="0.2799%" height="15" fill="rgb(236,162,54)" fg:x="14340" fg:w="145"/><text x="27.9329%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (774 samples, 1.49%)</title><rect x="27.9628%" y="597" width="1.4942%" height="15" fill="rgb(220,229,9)" fg:x="14485" fg:w="774"/><text x="28.2128%" y="607.50"></text></g><g><title>core::intrinsics::unlikely (18 samples, 0.03%)</title><rect x="29.4570%" y="597" width="0.0347%" height="15" fill="rgb(250,87,22)" fg:x="15259" fg:w="18"/><text x="29.7070%" y="607.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (16 samples, 0.03%)</title><rect x="29.4917%" y="597" width="0.0309%" height="15" fill="rgb(239,43,17)" fg:x="15277" fg:w="16"/><text x="29.7417%" y="607.50"></text></g><g><title>core::ptr::write (60 samples, 0.12%)</title><rect x="29.5226%" y="597" width="0.1158%" height="15" fill="rgb(231,177,25)" fg:x="15293" fg:w="60"/><text x="29.7726%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (5,971 samples, 11.53%)</title><rect x="29.6384%" y="597" width="11.5268%" height="15" fill="rgb(219,179,1)" fg:x="15353" fg:w="5971"/><text x="29.8884%" y="607.50">core::sync::atomi..</text></g><g><title>pcls::maybe_id::MaybeID::id (32 samples, 0.06%)</title><rect x="41.1652%" y="597" width="0.0618%" height="15" fill="rgb(238,219,53)" fg:x="21324" fg:w="32"/><text x="41.4152%" y="607.50"></text></g><g><title>pcls::sim::Simulation::overlap (4,294 samples, 8.29%)</title><rect x="45.7906%" y="581" width="8.2894%" height="15" fill="rgb(232,167,36)" fg:x="23720" fg:w="4294"/><text x="46.0406%" y="591.50">pcls::sim::S..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (193 samples, 0.37%)</title><rect x="54.0800%" y="565" width="0.3726%" height="15" fill="rgb(244,19,51)" fg:x="28014" fg:w="193"/><text x="54.3300%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (77 samples, 0.15%)</title><rect x="54.4526%" y="565" width="0.1486%" height="15" fill="rgb(224,6,22)" fg:x="28207" fg:w="77"/><text x="54.7026%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (493 samples, 0.95%)</title><rect x="54.6013%" y="565" width="0.9517%" height="15" fill="rgb(224,145,5)" fg:x="28284" fg:w="493"/><text x="54.8513%" y="575.50"></text></g><g><title>core::f32::_&lt;impl f32&gt;::from_bits (1,949 samples, 3.76%)</title><rect x="55.5588%" y="565" width="3.7625%" height="15" fill="rgb(234,130,49)" fg:x="28780" fg:w="1949"/><text x="55.8088%" y="575.50">core..</text></g><g><title>core::f32::math::sqrt (14 samples, 0.03%)</title><rect x="59.3212%" y="565" width="0.0270%" height="15" fill="rgb(254,6,2)" fg:x="30729" fg:w="14"/><text x="59.5712%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_store (277 samples, 0.53%)</title><rect x="59.3483%" y="565" width="0.5347%" height="15" fill="rgb(208,96,46)" fg:x="30743" fg:w="277"/><text x="59.5983%" y="575.50"></text></g><g><title>pcls::sim::Simulation::resolve_overlaps::_{{closure}}::_{{closure}} (40,986 samples, 79.12%)</title><rect x="20.7004%" y="613" width="79.1220%" height="15" fill="rgb(239,3,39)" fg:x="10723" fg:w="40986"/><text x="20.9504%" y="623.50">pcls::sim::Simulation::resolve_overlaps::_{{closure}}::_{{closure}}</text></g><g><title>pcls::sim::Simulation::overlap_chunk (30,353 samples, 58.60%)</title><rect x="41.2270%" y="597" width="58.5954%" height="15" fill="rgb(233,210,1)" fg:x="21356" fg:w="30353"/><text x="41.4770%" y="607.50">pcls::sim::Simulation::overlap_chunk</text></g><g><title>pcls::sim::Simulation::overlap_chunk (23,695 samples, 45.74%)</title><rect x="54.0800%" y="581" width="45.7424%" height="15" fill="rgb(244,137,37)" fg:x="28014" fg:w="23695"/><text x="54.3300%" y="591.50">pcls::sim::Simulation::overlap_chunk</text></g><g><title>pcls::sim::Simulation::overlap (20,689 samples, 39.94%)</title><rect x="59.8830%" y="565" width="39.9394%" height="15" fill="rgb(240,136,2)" fg:x="31020" fg:w="20689"/><text x="60.1330%" y="575.50">pcls::sim::Simulation::overlap</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (41,008 samples, 79.16%)</title><rect x="20.7004%" y="629" width="79.1645%" height="15" fill="rgb(239,18,37)" fg:x="10723" fg:w="41008"/><text x="20.9504%" y="639.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}::_{{closure}} (21 samples, 0.04%)</title><rect x="99.8243%" y="613" width="0.0405%" height="15" fill="rgb(218,185,22)" fg:x="51710" fg:w="21"/><text x="100.0743%" y="623.50"></text></g><g><title>std::thread::spawnhook::ChildSpawnHooks::run (20 samples, 0.04%)</title><rect x="99.8263%" y="597" width="0.0386%" height="15" fill="rgb(225,218,4)" fg:x="51711" fg:w="20"/><text x="100.0763%" y="607.50"></text></g><g><title>std::sys::thread_local::destructors::list::register (13 samples, 0.03%)</title><rect x="99.8398%" y="581" width="0.0251%" height="15" fill="rgb(230,182,32)" fg:x="51718" fg:w="13"/><text x="100.0898%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 0.03%)</title><rect x="99.8398%" y="565" width="0.0251%" height="15" fill="rgb(242,56,43)" fg:x="51718" fg:w="13"/><text x="100.0898%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.03%)</title><rect x="99.8398%" y="549" width="0.0251%" height="15" fill="rgb(233,99,24)" fg:x="51718" fg:w="13"/><text x="100.0898%" y="559.50"></text></g><g><title>nanov2_malloc_type (11 samples, 0.02%)</title><rect x="99.8436%" y="533" width="0.0212%" height="15" fill="rgb(234,209,42)" fg:x="51720" fg:w="11"/><text x="100.0936%" y="543.50"></text></g><g><title>_platform_memmove (8 samples, 0.02%)</title><rect x="99.8861%" y="565" width="0.0154%" height="15" fill="rgb(227,7,12)" fg:x="51742" fg:w="8"/><text x="100.1361%" y="575.50"></text></g><g><title>pthread_setspecific (7 samples, 0.01%)</title><rect x="99.9093%" y="565" width="0.0135%" height="15" fill="rgb(245,203,43)" fg:x="51754" fg:w="7"/><text x="100.1593%" y="575.50"></text></g><g><title>szone_malloc_should_clear (19 samples, 0.04%)</title><rect x="99.9228%" y="565" width="0.0367%" height="15" fill="rgb(238,205,33)" fg:x="51761" fg:w="19"/><text x="100.1728%" y="575.50"></text></g><g><title>tiny_malloc_should_clear (15 samples, 0.03%)</title><rect x="99.9305%" y="549" width="0.0290%" height="15" fill="rgb(231,56,7)" fg:x="51765" fg:w="15"/><text x="100.1805%" y="559.50"></text></g><g><title>tiny_malloc_from_free_list (10 samples, 0.02%)</title><rect x="99.9402%" y="533" width="0.0193%" height="15" fill="rgb(244,186,29)" fg:x="51770" fg:w="10"/><text x="100.1902%" y="543.50"></text></g><g><title>dyld::ThreadLocalVariables::instantiateVariable(dyld::ThreadLocalVariables::Thunk const&amp;) (48 samples, 0.09%)</title><rect x="99.8765%" y="581" width="0.0927%" height="15" fill="rgb(234,111,31)" fg:x="51737" fg:w="48"/><text x="100.1265%" y="591.50"></text></g><g><title>_tlv_get_addr (53 samples, 0.10%)</title><rect x="99.8707%" y="597" width="0.1023%" height="15" fill="rgb(241,149,10)" fg:x="51734" fg:w="53"/><text x="100.1207%" y="607.50"></text></g><g><title>all (51,801 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="51801"/><text x="0.2500%" y="703.50"></text></g><g><title>thread_start (42,674 samples, 82.38%)</title><rect x="17.6194%" y="677" width="82.3806%" height="15" fill="rgb(251,153,30)" fg:x="9127" fg:w="42674"/><text x="17.8694%" y="687.50">thread_start</text></g><g><title>_pthread_start (42,651 samples, 82.34%)</title><rect x="17.6638%" y="661" width="82.3362%" height="15" fill="rgb(239,152,38)" fg:x="9150" fg:w="42651"/><text x="17.9138%" y="671.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (41,941 samples, 80.97%)</title><rect x="19.0344%" y="645" width="80.9656%" height="15" fill="rgb(249,139,47)" fg:x="9860" fg:w="41941"/><text x="19.2844%" y="655.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (70 samples, 0.14%)</title><rect x="99.8649%" y="629" width="0.1351%" height="15" fill="rgb(244,64,35)" fg:x="51731" fg:w="70"/><text x="100.1149%" y="639.50"></text></g><g><title>std::thread::current::set_current (69 samples, 0.13%)</title><rect x="99.8668%" y="613" width="0.1332%" height="15" fill="rgb(216,46,15)" fg:x="51732" fg:w="69"/><text x="100.1168%" y="623.50"></text></g><g><title>dyld::ThreadLocalVariables::addTermFunc(void (*)(void*), void*) (14 samples, 0.03%)</title><rect x="99.9730%" y="597" width="0.0270%" height="15" fill="rgb(250,74,19)" fg:x="51787" fg:w="14"/><text x="100.2230%" y="607.50"></text></g><g><title>nanov2_malloc_type (14 samples, 0.03%)</title><rect x="99.9730%" y="581" width="0.0270%" height="15" fill="rgb(249,42,33)" fg:x="51787" fg:w="14"/><text x="100.2230%" y="591.50"></text></g></svg></svg>